from matplotlib.pyplot import axis
import pandas as pd
from PyQt5 import QtGui
from PyQt5.QtWidgets import QMessageBox

'''
# Validation for HSC
'''
def HSC_Validate(self, df_):
    global df

    filterString = self.lineEdit_2.text()
    
    df = df_.loc[df_['Facility Type'] == filterString]

    

    df.rename(columns={df.filter(regex='^1.7.1 ([(::)a-zA-Z0-9 ]+)|^1.7.1([(::)a-zA-Z0-9 ]+)|^1.7.1[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.7.1[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.7.1',})

    ## Renaming required columns which will be used later as short names of columns
    df.rename(columns={df.filter(regex='^1.1 ([(::)a-zA-Z0-9 ]+)|^1.1([(::)a-zA-Z0-9 ]+)|^1.1[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.1[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.1', 
                        df.filter(regex='^1.1.1 ([(::)a-zA-Z0-9 ]+)|^1.1.1([(::)a-zA-Z0-9 ]+)|^1.1.1[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.1.1[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.1.1',
                        df.filter(regex='^1.1.2 ([(::)a-zA-Z0-9 ]+)|^1.1.2([(::)a-zA-Z0-9 ]+)|^1.1.2[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.1.2[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.1.2',
                          df.filter(regex='^1.1.a ([(::)a-zA-Z0-9 ]+)|^1.1.a([(::)a-zA-Z0-9 ]+)|^1.1.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.1.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.1.a',
                            df.filter(regex='^1.2.1 ([(::)a-zA-Z0-9 ]+)|^1.2.1([(::)a-zA-Z0-9 ]+)|^1.2.1[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.2.1[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.2.1',
                              df.filter(regex='^1.2.2 ([(::)a-zA-Z0-9 ]+)|^1.2.2([(::)a-zA-Z0-9 ]+)|^1.2.2[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.2.2[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.2.2',
                                df.filter(regex='^1.2.3 ([(::)a-zA-Z0-9 ]+)|^1.2.3([(::)a-zA-Z0-9 ]+)|^1.2.3[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.2.3[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.2.3',
                                  df.filter(regex='^1.5.1 ([(::)a-zA-Z0-9 ]+)|^1.5.1([(::)a-zA-Z0-9 ]+)|^1.5.1[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.5.1[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.5.1',
                                    df.filter(regex='^1.5.2 ([(::)a-zA-Z0-9 ]+)|^1.5.2([(::)a-zA-Z0-9 ]+)|^1.5.2[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.5.2[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.5.2',
                                      df.filter(regex='^1.6.1.a ([(::)a-zA-Z0-9 ]+)|^1.6.1.a([(::)a-zA-Z0-9 ]+)|^1.6.1.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.6.1.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.6.1.a',
                                        df.filter(regex='^1.6.1.b ([(::)a-zA-Z0-9 ]+)|^1.6.1.b([(::)a-zA-Z0-9 ]+)|^1.6.1.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.6.1.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.6.1.b',
                                          df.filter(regex='^1.6.1.d ([(::)a-zA-Z0-9 ]+)|^1.6.1.d([(::)a-zA-Z0-9 ]+)|^1.6.1.d[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.6.1.d[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.6.1.d',
                                            df.filter(regex='^1.7.1 ([(::)a-zA-Z0-9 ]+)|^1.7.1([(::)a-zA-Z0-9 ]+)|^1.7.1[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.7.1[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.7.1',
                                              df.filter(regex='^1.7.2 ([(::)a-zA-Z0-9 ]+)|^1.7.2([(::)a-zA-Z0-9 ]+)|^1.7.2[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.7.2[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.7.2',
                                                df.filter(regex='^1.8.1.a ([(::)a-zA-Z0-9 ]+)|^1.8.1.a([(::)a-zA-Z0-9 ]+)|^1.8.1.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.8.1.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.8.1.a',
                                                  df.filter(regex='^1.8.1.b ([(::)a-zA-Z0-9 ]+)|^1.8.1.b([(::)a-zA-Z0-9 ]+)|^1.8.1.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.8.1.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.8.1.b',
                                                    df.filter(regex='^1.8.1.c ([(::)a-zA-Z0-9 ]+)|^1.8.1.c([(::)a-zA-Z0-9 ]+)|^1.8.1.c[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.8.1.c[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.8.1.c',
                                                      df.filter(regex='^1.8.1.d ([(::)a-zA-Z0-9 ]+)|^1.8.1.d([(::)a-zA-Z0-9 ]+)|^1.8.1.d[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^1.8.1.d[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_1.8.1.d',
                                                        df.filter(regex='^2.1.1.a ([(::)a-zA-Z0-9 ]+)|^2.1.1.a([(::)a-zA-Z0-9 ]+)|^2.1.1.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^2.1.1.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_2.1.1.a',
                                                          df.filter(regex='^2.1.1.b ([(::)a-zA-Z0-9 ]+)|^2.1.1.b([(::)a-zA-Z0-9 ]+)|^2.1.1.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^2.1.1.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_2.1.1.b',
                                                            df.filter(regex='^2.2 ([(::)a-zA-Z0-9 ]+)|^2.2([(::)a-zA-Z0-9 ]+)|^2.2[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^2.2[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_2.2',
                                                              df.filter(regex='^2.2.1 ([(::)a-zA-Z0-9 ]+)|^2.2.1([(::)a-zA-Z0-9 ]+)|^2.2.1[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^2.2.1[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_2.2.1',
                                                                df.filter(regex='^2.2.2 ([(::)a-zA-Z0-9 ]+)|^2.2.2([(::)a-zA-Z0-9 ]+)|^2.2.2[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^2.2.2[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_2.2.2',
                                                                df.filter(regex='^2.3 ([(::)a-zA-Z0-9 ]+)|^2.3([(::)a-zA-Z0-9 ]+)|^2.3[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^2.3[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_2.3',
                                                              df.filter(regex='^3.1.1.a ([(::)a-zA-Z0-9 ]+)|^3.1.1.a([(::)a-zA-Z0-9 ]+)|^3.1.1.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^3.1.1.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_3.1.1.a',
                                                            df.filter(regex='^3.1.1.b ([(::)a-zA-Z0-9 ]+)|^3.1.1.b([(::)a-zA-Z0-9 ]+)|^3.1.1.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^3.1.1.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_3.1.1.b',
                                                          df.filter(regex='^3.1.2 ([(::)a-zA-Z0-9 ]+)|^3.1.2([(::)a-zA-Z0-9 ]+)|^3.1.2[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^3.1.2[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_3.1.2',
                                                        df.filter(regex='^3.1.3.b ([(::)a-zA-Z0-9 ]+)|^3.1.3.b([(::)a-zA-Z0-9 ]+)|^3.1.3.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^3.1.3.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_3.1.3.b',
                                                      df.filter(regex='^3.1.3.a ([(::)a-zA-Z0-9 ]+)|^3.1.3.a([(::)a-zA-Z0-9 ]+)|^3.1.3.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^3.1.3.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_3.1.3.a',
                                                    df.filter(regex='^3.4.1 ([(::)a-zA-Z0-9 ]+)|^3.4.1([(::)a-zA-Z0-9 ]+)|^3.4.1[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^3.4.1[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_3.4.1',
                                                  df.filter(regex='^3.4.2 ([(::)a-zA-Z0-9 ]+)|^3.4.2([(::)a-zA-Z0-9 ]+)|^3.4.2[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^3.4.2[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_3.4.2',
                                                df.filter(regex='^3.4.2.a ([(::)a-zA-Z0-9 ]+)|^3.4.2.a([(::)a-zA-Z0-9 ]+)|^3.4.2.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^3.4.2.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_3.4.2.a',
                                              df.filter(regex='^3.4.3 ([(::)a-zA-Z0-9 ]+)|^3.4.3([(::)a-zA-Z0-9 ]+)|^3.4.3[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^3.4.3[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_3.4.3',
                                            df.filter(regex='^3.4.4 ([(::)a-zA-Z0-9 ]+)|^3.4.4([(::)a-zA-Z0-9 ]+)|^3.4.4[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^3.4.4[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_3.4.4',
                                          df.filter(regex='^3.5.1 ([(::)a-zA-Z0-9 ]+)|^3.5.1([(::)a-zA-Z0-9 ]+)|^3.5.1[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^3.5.1[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_3.5.1',
                                        df.filter(regex='^3.5.1.a ([(::)a-zA-Z0-9 ]+)|^3.5.1.a([(::)a-zA-Z0-9 ]+)|^3.5.1.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^3.5.1.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_3.5.1.a',
                                      df.filter(regex='^6.1.1 ([(::)a-zA-Z0-9 ]+)|^6.1.1([(::)a-zA-Z0-9 ]+)|^6.1.1[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^6.1.1[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_6.1.1',
                                    df.filter(regex='^6.1.1.a ([(::)a-zA-Z0-9 ]+)|^6.1.1.a([(::)a-zA-Z0-9 ]+)|^6.1.1.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^6.1.1.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_6.1.1.a',
                                  df.filter(regex='^6.1.2 ([(::)a-zA-Z0-9 ]+)|^6.1.2([(::)a-zA-Z0-9 ]+)|^6.1.2[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^6.1.2[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_6.1.2',
                                df.filter(regex='^6.1.2.a ([(::)a-zA-Z0-9 ]+)|^6.1.2.a([(::)a-zA-Z0-9 ]+)|^6.1.2.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^6.1.2.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_6.1.2.a',
                              df.filter(regex='^6.1.3 ([(::)a-zA-Z0-9 ]+)|^6.1.3([(::)a-zA-Z0-9 ]+)|^6.1.3[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^6.1.3[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_6.1.3',
                              df.filter(regex='^6.1.3.a ([(::)a-zA-Z0-9 ]+)|^6.1.3.a([(::)a-zA-Z0-9 ]+)|^6.1.3.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^6.1.3.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_6.1.3.a',
                            df.filter(regex='^10.1.1.a ([(::)a-zA-Z0-9 ]+)|^10.1.1.a([(::)a-zA-Z0-9 ]+)|^10.1.1.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^10.1.1.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_10.1.1.a',
                          df.filter(regex='^10.1.1.b ([(::)a-zA-Z0-9 ]+)|^10.1.1.b([(::)a-zA-Z0-9 ]+)|^10.1.1.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^10.1.1.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_10.1.1.b',
                        df.filter(regex='^10.1.1.c ([(::)a-zA-Z0-9 ]+)|^10.1.1.c([(::)a-zA-Z0-9 ]+)|^10.1.1.c[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^10.1.1.c[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_10.1.1.c',
                      df.filter(regex='^10.1.1.d ([(::)a-zA-Z0-9 ]+)|^10.1.1.d([(::)a-zA-Z0-9 ]+)|^10.1.1.d[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^10.1.1.d[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_10.1.1.d',
                    df.filter(regex='^12.2 ([(::)a-zA-Z0-9 ]+)|^12.2([(::)a-zA-Z0-9 ]+)|^12.2[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^12.2[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_12.2',
                    df.filter(regex='^12.3 ([(::)a-zA-Z0-9 ]+)|^12.3([(::)a-zA-Z0-9 ]+)|^12.3[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^12.3[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_12.3',
                      df.filter(regex='^12.3.a ([(::)a-zA-Z0-9 ]+)|^12.3.a([(::)a-zA-Z0-9 ]+)|^12.3.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^12.3.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_12.3.a',
                        df.filter(regex='^12.3.b ([(::)a-zA-Z0-9 ]+)|^12.3.b([(::)a-zA-Z0-9 ]+)|^12.3.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^12.3.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_12.3.b',
                          df.filter(regex='^12.4 ([(::)a-zA-Z0-9 ]+)|^12.4([(::)a-zA-Z0-9 ]+)|^12.4[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^12.4[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_12.4',
                            df.filter(regex='^12.5 ([(::)a-zA-Z0-9 ]+)|^12.5([(::)a-zA-Z0-9 ]+)|^12.5[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^12.5[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_12.5',
                              df.filter(regex='^12.6 ([(::)a-zA-Z0-9 ]+)|^12.6([(::)a-zA-Z0-9 ]+)|^12.6[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^12.6[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_12.6',
                                df.filter(regex='^13.1.1 ([(::)a-zA-Z0-9 ]+)|^13.1.1([(::)a-zA-Z0-9 ]+)|^13.1.1[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.1.1[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.1.1',
                                  df.filter(regex='^13.1.2 ([(::)a-zA-Z0-9 ]+)|^13.1.2([(::)a-zA-Z0-9 ]+)|^13.1.2[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.1.2[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.1.2',
                                    df.filter(regex='^13.1.3 ([(::)a-zA-Z0-9 ]+)|^13.1.3([(::)a-zA-Z0-9 ]+)|^13.1.3[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.1.3[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.1.3',
                                      df.filter(regex='^13.1.4 ([(::)a-zA-Z0-9 ]+)|^13.1.4([(::)a-zA-Z0-9 ]+)|^13.1.4[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.1.4[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.1.4',
                                        df.filter(regex='^13.1.5 ([(::)a-zA-Z0-9 ]+)|^13.1.5([(::)a-zA-Z0-9 ]+)|^13.1.5[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.1.5[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.1.5',
                                          df.filter(regex='^13.1.6 ([(::)a-zA-Z0-9 ]+)|^13.1.6([(::)a-zA-Z0-9 ]+)|^13.1.6[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.1.6[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.1.6',
                                            df.filter(regex='^13.1.7 ([(::)a-zA-Z0-9 ]+)|^13.1.7([(::)a-zA-Z0-9 ]+)|^13.1.7[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.1.7[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.1.7',
                                              df.filter(regex='^13.1.8 ([(::)a-zA-Z0-9 ]+)|^13.1.8([(::)a-zA-Z0-9 ]+)|^13.1.8[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.1.8[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.1.8',
                                                df.filter(regex='^13.1.9 ([(::)a-zA-Z0-9 ]+)|^13.1.9([(::)a-zA-Z0-9 ]+)|^13.1.9[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.1.9[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.1.9',                                      
                                                  df.filter(regex='^13.1.10 ([(::)a-zA-Z0-9 ]+)|^13.1.10([(::)a-zA-Z0-9 ]+)|^13.1.10[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.1.10[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.1.10',
                                                    df.filter(regex='^13.1.11 ([(::)a-zA-Z0-9 ]+)|^13.1.11([(::)a-zA-Z0-9 ]+)|^13.1.11[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.1.11[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.1.11',
                                                      df.filter(regex='^13.1.12 ([(::)a-zA-Z0-9 ]+)|^13.1.12([(::)a-zA-Z0-9 ]+)|^13.1.12[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.1.12[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.1.12',
                                                        df.filter(regex='^13.1.13 ([(::)a-zA-Z0-9 ]+)|^13.1.13([(::)a-zA-Z0-9 ]+)|^13.1.13[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.1.13[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.1.13',
                                                          df.filter(regex='^13.2.1 ([(::)a-zA-Z0-9 ]+)|^13.2.1([(::)a-zA-Z0-9 ]+)|^13.2.1[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.2.1[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.2.1',
                                                            df.filter(regex='^13.2.2 ([(::)a-zA-Z0-9 ]+)|^13.2.2([(::)a-zA-Z0-9 ]+)|^13.2.2[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.2.2[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.2.2',
                                                              df.filter(regex='^13.3.1.a ([(::)a-zA-Z0-9 ]+)|^13.3.1.a([(::)a-zA-Z0-9 ]+)|^13.3.1.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.3.1.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.3.1.a',
                                                                df.filter(regex='^13.10.1.a ([(::)a-zA-Z0-9 ]+)|^13.10.1.a([(::)a-zA-Z0-9 ]+)|^13.10.1.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.10.1.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.10.1.a',
                                                                df.filter(regex='^13.10.1.b ([(::)a-zA-Z0-9 ]+)|^13.10.1.b([(::)a-zA-Z0-9 ]+)|^13.10.1.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.10.1.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.10.1.b',
                                                              df.filter(regex='^13.10.2.a ([(::)a-zA-Z0-9 ]+)|^13.10.2.a([(::)a-zA-Z0-9 ]+)|^13.10.2.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.10.2.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.10.2.a',
                                                            df.filter(regex='^13.10.2.b ([(::)a-zA-Z0-9 ]+)|^13.10.2.b([(::)a-zA-Z0-9 ]+)|^13.10.2.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.10.2.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.10.2.b',
                                                          df.filter(regex='^13.10.3.a ([(::)a-zA-Z0-9 ]+)|^13.10.3.a([(::)a-zA-Z0-9 ]+)|^13.10.3.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.10.3.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.10.3.a',
                                                        df.filter(regex='^13.10.3.b ([(::)a-zA-Z0-9 ]+)|^13.10.3.b([(::)a-zA-Z0-9 ]+)|^13.10.3.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^13.10.3.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_13.10.3.b',
                                                      df.filter(regex='^14.1.1 ([(::)a-zA-Z0-9 ]+)|^14.1.1([(::)a-zA-Z0-9 ]+)|^14.1.1[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.1.1[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.1.1',
                                                    df.filter(regex='^14.1.2 ([(::)a-zA-Z0-9 ]+)|^14.1.2([(::)a-zA-Z0-9 ]+)|^14.1.2[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.1.2[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.1.2',
                                                  df.filter(regex='^14.2.1 ([(::)a-zA-Z0-9 ]+)|^14.2.1([(::)a-zA-Z0-9 ]+)|^14.2.1[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.2.1[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.2.1',
                                                df.filter(regex='^14.2.2 ([(::)a-zA-Z0-9 ]+)|^14.2.2([(::)a-zA-Z0-9 ]+)|^14.2.2[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.2.2[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.2.2',
                                              df.filter(regex='^14.3.1.a ([(::)a-zA-Z0-9 ]+)|^14.3.1.a([(::)a-zA-Z0-9 ]+)|^14.3.1.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.3.1.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.3.1.a',
                                              df.filter(regex='^14.3.1.b ([(::)a-zA-Z0-9 ]+)|^14.3.1.b([(::)a-zA-Z0-9 ]+)|^14.3.1.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.3.1.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.3.1.b',
                                              df.filter(regex='^14.3.1.d ([(::)a-zA-Z0-9 ]+)|^14.3.1.d([(::)a-zA-Z0-9 ]+)|^14.3.1.d[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.3.1.d[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.3.1.d',
                                              df.filter(regex='^14.3.1.c ([(::)a-zA-Z0-9 ]+)|^14.3.1.c([(::)a-zA-Z0-9 ]+)|^14.3.1.c[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.3.1.c[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.3.1.c',
                                            df.filter(regex='^14.3.2.a ([(::)a-zA-Z0-9 ]+)|^14.3.2.a([(::)a-zA-Z0-9 ]+)|^14.3.2.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.3.2.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.3.2.a',
                                            df.filter(regex='^14.3.2.b ([(::)a-zA-Z0-9 ]+)|^14.3.2.b([(::)a-zA-Z0-9 ]+)|^14.3.2.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.3.2.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.3.2.b',
                                            df.filter(regex='^14.3.2.c ([(::)a-zA-Z0-9 ]+)|^14.3.2.c([(::)a-zA-Z0-9 ]+)|^14.3.2.c[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.3.2.c[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.3.2.c',
                                            df.filter(regex='^14.3.2.d ([(::)a-zA-Z0-9 ]+)|^14.3.2.d([(::)a-zA-Z0-9 ]+)|^14.3.2.d[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.3.2.d[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.3.2.d',
                                            df.filter(regex='^14.3.3.a ([(::)a-zA-Z0-9 ]+)|^14.3.3.a([(::)a-zA-Z0-9 ]+)|^14.3.3.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.3.3.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.3.3.a',
                                            df.filter(regex='^14.3.3.b ([(::)a-zA-Z0-9 ]+)|^14.3.3.b([(::)a-zA-Z0-9 ]+)|^14.3.3.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.3.3.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.3.3.b',
                                            df.filter(regex='^14.3.3.c ([(::)a-zA-Z0-9 ]+)|^14.3.3.c([(::)a-zA-Z0-9 ]+)|^14.3.3.c[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.3.3.c[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.3.3.c',
                                            df.filter(regex='^14.3.3.d ([(::)a-zA-Z0-9 ]+)|^14.3.3.d([(::)a-zA-Z0-9 ]+)|^14.3.3.d[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.3.3.d[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.3.3.d',
                                            df.filter(regex='^14.3.4.a ([(::)a-zA-Z0-9 ]+)|^14.3.4.a([(::)a-zA-Z0-9 ]+)|^14.3.4.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.3.4.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.3.4.a',
                                            df.filter(regex='^14.3.4.b ([(::)a-zA-Z0-9 ]+)|^14.3.4.b([(::)a-zA-Z0-9 ]+)|^14.3.4.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.3.4.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.3.4.b',
                                            df.filter(regex='^14.3.4.c ([(::)a-zA-Z0-9 ]+)|^14.3.4.c([(::)a-zA-Z0-9 ]+)|^14.3.4.c[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.3.4.c[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.3.4.c',
                                            df.filter(regex='^14.3.4.d ([(::)a-zA-Z0-9 ]+)|^14.3.4.d([(::)a-zA-Z0-9 ]+)|^14.3.4.d[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.3.4.d[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.3.4.d',
                                          df.filter(regex='^14.4.2.a ([(::)a-zA-Z0-9 ]+)|^14.4.2.a([(::)a-zA-Z0-9 ]+)|^14.4.2.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.4.2.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.4.2.a',
                                          df.filter(regex='^14.4.1.a ([(::)a-zA-Z0-9 ]+)|^14.4.1.a([(::)a-zA-Z0-9 ]+)|^14.4.1.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.4.1.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.4.1.a',
                                          df.filter(regex='^14.4.1.b ([(::)a-zA-Z0-9 ]+)|^14.4.1.b([(::)a-zA-Z0-9 ]+)|^14.4.1.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.4.1.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.4.1.b',
                                        df.filter(regex='^14.4.2.b ([(::)a-zA-Z0-9 ]+)|^14.4.2.b([(::)a-zA-Z0-9 ]+)|^14.4.2.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.4.2.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.4.2.b',
                                      df.filter(regex='^14.4.3.a ([(::)a-zA-Z0-9 ]+)|^14.4.3.a([(::)a-zA-Z0-9 ]+)|^14.4.3.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.4.3.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.4.3.a',
                                    df.filter(regex='^14.4.3.b ([(::)a-zA-Z0-9 ]+)|^14.4.3.b([(::)a-zA-Z0-9 ]+)|^14.4.3.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^14.4.3.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_14.4.3.b',
                                  df.filter(regex='^15.1.1.a ([(::)a-zA-Z0-9 ]+)|^15.1.1.a([(::)a-zA-Z0-9 ]+)|^15.1.1.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.1.1.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.1.1.a',
                                df.filter(regex='^15.1.1.b ([(::)a-zA-Z0-9 ]+)|^15.1.1.b([(::)a-zA-Z0-9 ]+)|^15.1.1.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.1.1.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.1.1.b',
                              df.filter(regex='^15.1.2.a ([(::)a-zA-Z0-9 ]+)|^15.1.2.a([(::)a-zA-Z0-9 ]+)|^15.1.2.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.1.2.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.1.2.a',
                            df.filter(regex='^15.1.2.b ([(::)a-zA-Z0-9 ]+)|^15.1.2.b([(::)a-zA-Z0-9 ]+)|^15.1.2.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.1.2.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.1.2.b',
                          df.filter(regex='^15.1.3.a ([(::)a-zA-Z0-9 ]+)|^15.1.3.a([(::)a-zA-Z0-9 ]+)|^15.1.3.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.1.3.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.1.3.a',
                        df.filter(regex='^15.1.3.b ([(::)a-zA-Z0-9 ]+)|^15.1.3.b([(::)a-zA-Z0-9 ]+)|^15.1.3.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.1.3.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.1.3.b',
                      df.filter(regex='^15.1.4.a ([(::)a-zA-Z0-9 ]+)|^15.1.4.a([(::)a-zA-Z0-9 ]+)|^15.1.4.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.1.4.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.1.4.a',
                    df.filter(regex='^15.1.4.b ([(::)a-zA-Z0-9 ]+)|^15.1.4.b([(::)a-zA-Z0-9 ]+)|^15.1.4.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.1.4.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.1.4.b',
                    df.filter(regex='^15.2.1 ([(::)a-zA-Z0-9 ]+)|^15.2.1([(::)a-zA-Z0-9 ]+)|^15.2.1[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.2.1[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.2.1',
                      df.filter(regex='^15.2.2 ([(::)a-zA-Z0-9 ]+)|^15.2.2([(::)a-zA-Z0-9 ]+)|^15.2.2[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.2.2[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.2.2',
                        df.filter(regex='^15.2.3 ([(::)a-zA-Z0-9 ]+)|^15.2.3([(::)a-zA-Z0-9 ]+)|^15.2.3[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.2.3[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.2.3',
                          df.filter(regex='^15.2.4 ([(::)a-zA-Z0-9 ]+)|^15.2.4([(::)a-zA-Z0-9 ]+)|^15.2.4[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.2.4[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.2.4',
                            df.filter(regex='^15.3.1 ([(::)a-zA-Z0-9 ]+)|^15.3.1([(::)a-zA-Z0-9 ]+)|^15.3.1[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.3.1[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.3.1',
                              df.filter(regex='^15.3.2 ([(::)a-zA-Z0-9 ]+)|^15.3.2([(::)a-zA-Z0-9 ]+)|^15.3.2[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.3.2[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.3.2',
                                df.filter(regex='^15.3.3 ([(::)a-zA-Z0-9 ]+)|^15.3.3([(::)a-zA-Z0-9 ]+)|^15.3.3[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.3.3[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.3.3',
                                  df.filter(regex='^15.3.4 ([(::)a-zA-Z0-9 ]+)|^15.3.4([(::)a-zA-Z0-9 ]+)|^15.3.4[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.3.4[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.3.4',
                                    df.filter(regex='^15.3.5 ([(::)a-zA-Z0-9 ]+)|^15.3.5([(::)a-zA-Z0-9 ]+)|^15.3.5[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.3.5[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.3.5',
                                      df.filter(regex='^15.5.1 ([(::)a-zA-Z0-9 ]+)|^15.5.1([(::)a-zA-Z0-9 ]+)|^15.5.1[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.5.1[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.5.1',
                                        df.filter(regex='^15.5.2 ([(::)a-zA-Z0-9 ]+)|^15.5.2([(::)a-zA-Z0-9 ]+)|^15.5.2[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.5.2[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.5.2',
                                          df.filter(regex='^15.5.3 ([(::)a-zA-Z0-9 ]+)|^15.5.3([(::)a-zA-Z0-9 ]+)|^15.5.3[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.5.3[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.5.3',
                                            df.filter(regex='^15.5.4 ([(::)a-zA-Z0-9 ]+)|^15.5.4([(::)a-zA-Z0-9 ]+)|^15.5.4[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.5.4[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.5.4',
                                              df.filter(regex='^15.5.5 ([(::)a-zA-Z0-9 ]+)|^15.5.5([(::)a-zA-Z0-9 ]+)|^15.5.5[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.5.5[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.5.5',
                                                df.filter(regex='^15.5.6 ([(::)a-zA-Z0-9 ]+)|^15.5.6([(::)a-zA-Z0-9 ]+)|^15.5.6[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.5.6[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.5.6',
                                                  df.filter(regex='^15.5.7 ([(::)a-zA-Z0-9 ]+)|^15.5.7([(::)a-zA-Z0-9 ]+)|^15.5.7[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.5.7[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.5.7',
                                                  df.filter(regex='^15.5.8 ([(::)a-zA-Z0-9 ]+)|^15.5.8([(::)a-zA-Z0-9 ]+)|^15.5.8[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.5.8[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.5.8',
                                                    df.filter(regex='^15.5.8.a ([(::)a-zA-Z0-9 ]+)|^15.5.8.a([(::)a-zA-Z0-9 ]+)|^15.5.8.a[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.5.8.a[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.5.8.a',
                                                      df.filter(regex='^15.5.8.b ([(::)a-zA-Z0-9 ]+)|^15.5.8.b([(::)a-zA-Z0-9 ]+)|^15.5.8.b[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.5.8.b[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.5.8.b',
                                                        df.filter(regex='^15.5.8.c ([(::)a-zA-Z0-9 ]+)|^15.5.8.c([(::)a-zA-Z0-9 ]+)|^15.5.8.c[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.5.8.c[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.5.8.c',
                                                          df.filter(regex='^15.5.8.d ([(::)a-zA-Z0-9 ]+)|^15.5.8.d([(::)a-zA-Z0-9 ]+)|^15.5.8.d[(::)-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+ ([(::)a-zA-Z0-9 ]+)|^15.5.8.d[-._!`#%&,:;<>=@{}~\$\(\)\*\+\/\\\?\[\]\^\|]+([(::)a-zA-Z0-9 ]+)').columns[0]: 'col_15.5.8.d',
                                                         },inplace=True)


    # Modified Checks of HSC
    # **********************

    blnk = 'Blank'
    con = 'Consistent'
    inc = 'Inconsistent'
    incBlnk = 'Inconsistent due to blank'


    ### 1.1.1 <= 1.1
    ### ------------
    def res1(df):
        # If all elements are null
        if pd.isnull(df['col_1.1.1']) and pd.isnull(df['col_1.1']):
            return str(blnk  + ' ' + '1.1.1' + ' (' + str(df['col_1.1.1']) + ' ) ' + '<=' + '1.1' + ' (' + str(df['col_1.1']) + ' ) ')

        ### If all left element is null
        elif pd.isnull(df['col_1.1.1']) and pd.notnull(df['col_1.1']):
            return str(incBlnk + ' ' + '1.1.1' + ' (' + str(df['col_1.1.1']) + ' ) ' + '<=' + '1.1' + ' (' + str(df['col_1.1']) + ' ) ')
        
        ### If all right element is null
        elif pd.notnull(df['col_1.1.1']) and pd.isnull(df['col_1.1']):
            return str(incBlnk + ' ' + '1.1.1' + ' (' + str(df['col_1.1.1']) + ' ) ' + '<=' + '1.1' + ' (' + str(df['col_1.1']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_1.1.1']) and pd.notnull(df['col_1.1']):
            ### INCONSISTENT
            if df['col_1.1.1'] > df['col_1.1']:
                return str( inc + ' ' + '1.1.1' + ' (' + str(df['col_1.1.1']) + ' ) ' + '>' + '1.1' + ' (' + str(df['col_1.1']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_1.1.1'] <= df['col_1.1']:
                return con


    ### 1.1.2 >= 1.1 
    ### ------------
    def res2(df):
        # If all elements are null
        if pd.isnull(df['col_1.1.2']) and pd.isnull(df['col_1.1']):
            return str(blnk  + ' ' + '1.1.2' + ' (' + str(df['col_1.1.2']) + ' ) ' + '>=' + '1.1' + ' (' + str(df['col_1.1']) + ' ) ')

        ### If any one element is null
        elif pd.isnull(df['col_1.1.2']) and pd.notnull(df['col_1.1']):
            return str(incBlnk + ' ' + '1.1.2' + ' (' + str(df['col_1.1.2']) + ' ) ' + '>=' + '1.1' + ' (' + str(df['col_1.1']) + ' ) ')
        
        ### If any one element is null
        elif pd.notnull(df['col_1.1.2']) and pd.isnull(df['col_1.1']):
            return str(incBlnk + ' ' + '1.1.2' + ' (' + str(df['col_1.1.2']) + ' ) ' + '>=' + '1.1' + ' (' + str(df['col_1.1']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_1.1.2']) and pd.notnull(df['col_1.1']):
            ### INCONSISTENT
            if df['col_1.1.2'] < df['col_1.1']:
                return str( inc + ' ' + '1.1.2' + ' (' + str(df['col_1.1.2']) + ' ) ' + '<' + '1.1' + ' (' + str(df['col_1.1']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_1.1.2'] >= df['col_1.1']:
                return con


    ### 1.1.2 >= 1.2.1 + 1.2.2 + 1.2.3
    ### ------------------------------
    def res3(df):
        # If all elements are null
        if pd.isnull(df['col_1.1.2']) and pd.isnull(df['col_1.2.1']) and pd.isnull(df['col_1.2.2']) and pd.isnull(df['col_1.2.3']):
            return str(blnk + ' ' + '1.1.2' + ' (' + str(df['col_1.1.2']) + ' ) ' + '>=' + '1.2.1' + ' (' + str(df['col_1.2.1']) + ' ) ')  + '1.2.2' + ' (' + str(df['col_1.2.2']) + ' ) ' + '1.2.3' + ' (' + str(df['col_1.2.3']) + ' ) '

        ### If any one element is null
        elif pd.isnull(df['col_1.1.2']) and ( pd.notnull(df['col_1.2.1']) and pd.notnull(df['col_1.2.2']) and pd.notnull(df['col_1.2.3']) ):
            return str(incBlnk + ' ' + '1.1.2' + ' (' + str(df['col_1.1.2']) + ' ) ' + '>=' + '1.2.1' + ' (' + str(df['col_1.2.1']) + ' ) ')  + '1.2.2' + ' (' + str(df['col_1.2.2']) + ' ) ' + '1.2.3' + ' (' + str(df['col_1.2.3']) + ' ) '
        
        ### If any one element is null
        elif pd.notnull(df['col_1.1.2']) and ( pd.isnull(df['col_1.2.1']) and pd.isnull(df['col_1.2.2']) and pd.isnull(df['col_1.2.3']) ):
            return str(incBlnk + ' ' + '1.1.2' + ' (' + str(df['col_1.1.2']) + ' ) ' + '>=' + '1.2.1' + ' (' + str(df['col_1.2.1']) + ' ) ')  + '1.2.2' + ' (' + str(df['col_1.2.2']) + ' ) ' + '1.2.3' + ' (' + str(df['col_1.2.3']) + ' ) '
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif pd.notnull(df['col_1.1.2']) and ( pd.notnull(df['col_1.2.1']) or pd.notnull(df['col_1.2.2']) or pd.notnull(df['col_1.2.3']) ):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_1.1.2']) and pd.notnull(df['col_1.2.1']) and pd.notnull(df['col_1.2.2']) and pd.notnull(df['col_1.2.3']):
            ### INCONSISTENT
            if df['col_1.1.2'] < df['col_1.2.1'] + df['col_1.2.2'] + df['col_1.2.3']:
                return str( inc + ' ' + '1.1.2' + ' (' + str(df['col_1.1.2']) + ' ) ' + '<' + '1.2.1' + ' (' + str(df['col_1.2.1']) + ' ) ')  + '1.2.2' + ' (' + str(df['col_1.2.2']) + ' ) ' + '1.2.3' + ' (' + str(df['col_1.2.3']) + ' ) '
        
            ### CONSISTENT
            elif df['col_1.1.2'] >= df['col_1.2.1'] + df['col_1.2.2'] + df['col_1.2.3']:
                return con


    ###  1.5.1 >= 1.5.2
    ###  --------------
    def res4(df):
        # If all elements are null
        if pd.isnull(df['col_1.5.1']) and pd.isnull(df['col_1.5.2']):
            return str(blnk  + ' ' + '1.5.1' + ' (' + str(df['col_1.5.1']) + ' ) ' + '>=' + '1.5.2' + ' (' + str(df['col_1.5.2']) + ' ) ')

        ### If any one element is null
        elif pd.isnull(df['col_1.5.1']) and pd.notnull(df['col_1.5.2']):
            return str(incBlnk  + ' ' + '1.5.1' + ' (' + str(df['col_1.5.1']) + ' ) ' + '>=' + '1.5.2' + ' (' + str(df['col_1.5.2']) + ' ) ')
        
        ### If any one element is null
        elif pd.notnull(df['col_1.5.1']) and pd.isnull(df['col_1.5.2']):
            return str(incBlnk  + ' ' + '1.5.1' + ' (' + str(df['col_1.5.1']) + ' ) ' + '>=' + '1.5.2' + ' (' + str(df['col_1.5.2']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_1.5.1']) and pd.notnull(df['col_1.5.2']):
            ### INCONSISTENT
            if df['col_1.5.1'] < df['col_1.5.2']:
                return str( inc  + ' ' + '1.5.1' + ' (' + str(df['col_1.5.1']) + ' ) ' + '<' + '1.5.2' + ' (' + str(df['col_1.5.2']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_1.5.1'] >= df['col_1.5.2']:
                return con
    

    ### 1.6.1.a >= 1.6.1.b
    ### ******************
    def res5(df):
        # If all elements are null
        if pd.isnull(df['col_1.6.1.a']) and pd.isnull(df['col_1.6.1.b']):
            return str(blnk  + ' ' + '1.6.1.a' + ' (' + str(df['col_1.6.1.a']) + ' ) ' + '>=' + '1.6.1.b' + ' (' + str(df['col_1.6.1.b']) + ' ) ')

        ### If any one element is null
        elif pd.isnull(df['col_1.6.1.a']) and pd.notnull(df['col_1.6.1.b']):
            return str(incBlnk  + ' ' + '1.6.1.a' + ' (' + str(df['col_1.6.1.a']) + ' ) ' + '>=' + '1.6.1.b' + ' (' + str(df['col_1.6.1.b']) + ' ) ')
        
        ### If any one element is null
        elif pd.notnull(df['col_1.6.1.a']) and pd.isnull(df['col_1.6.1.b']):
            return str(incBlnk  + ' ' + '1.6.1.a' + ' (' + str(df['col_1.6.1.a']) + ' ) ' + '>=' + '1.6.1.b' + ' (' + str(df['col_1.6.1.b']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_1.6.1.a']) and pd.notnull(df['col_1.6.1.b']):
            ### INCONSISTENT
            if df['col_1.6.1.a'] < df['col_1.6.1.b']:
                return str( inc  + ' ' + '1.6.1.a' + ' (' + str(df['col_1.6.1.a']) + ' ) ' + '<' + '1.6.1.b' + ' (' + str(df['col_1.6.1.b']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_1.6.1.a'] >= df['col_1.6.1.b']:
                return con


    ### 1.6.1.d <= 3.1.1.a + 3.1.1.b
    ### ****************************
    def res6(df):
        # If all elements are null
        if pd.isnull(df['col_1.6.1.d']) and pd.isnull(df['col_3.1.1.a']) and pd.isnull(df['col_3.1.1.b']):
            return str(blnk + ' ' + '1.6.1.d' + ' (' + str(df['col_1.6.1.d']) + ' ) ' + '<=' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ')  + '3.1.1.b' + ' (' + str(df['col_3.1.1.a']) + ' ) '

        ### If any one element is null
        elif pd.isnull(df['col_1.6.1.d']) and ( pd.notnull(df['col_3.1.1.a']) and pd.notnull(df['col_3.1.1.b'])):
            return str(incBlnk + ' ' + '1.6.1.d' + ' (' + str(df['col_1.6.1.d']) + ' ) ' + '<=' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ')  + '3.1.1.b' + ' (' + str(df['col_3.1.1.a']) + ' ) '
        
        ### If any one element is null
        elif pd.notnull(df['col_1.6.1.d']) and ( pd.isnull(df['col_3.1.1.a']) and pd.isnull(df['col_3.1.1.b']) ):
            return str(incBlnk + ' ' + '1.6.1.d' + ' (' + str(df['col_1.6.1.d']) + ' ) ' + '<=' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ')  + '3.1.1.b' + ' (' + str(df['col_3.1.1.a']) + ' ) '
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif pd.notnull(df['col_1.6.1.d']) and ( pd.notnull(df['col_3.1.1.a']) or pd.notnull(df['col_3.1.1.b']) ):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_1.6.1.d']) and pd.notnull(df['col_3.1.1.a']) and pd.notnull(df['col_3.1.1.b']):
            ### INCONSISTENT
            if df['col_1.6.1.d'] > df['col_3.1.1.a'] + df['col_3.1.1.b']:
                return str( inc + ' ' + '1.6.1.d' + ' (' + str(df['col_1.6.1.d']) + ' ) ' + '>' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ')  + '3.1.1.b' + ' (' + str(df['col_3.1.1.a']) + ' ) '
        
            ### CONSISTENT
            elif df['col_1.6.1.d'] <= df['col_3.1.1.a'] + df['col_3.1.1.b']:
                return con


    ### 1.7.1 >= 1.7.2
    ### **************
    def res7(df):
        ### If all elements are null
        if pd.isnull(df['col_1.7.1']) and pd.isnull(df['col_1.7.2']):
            return str(blnk  + ' ' + '1.7.1' + ' (' + str(df['col_1.7.1']) + ' ) ' + '>=' + '1.7.2' + ' (' + str(df['col_1.7.2']) + ' ) ')

        ### If any one element is null
        elif pd.isnull(df['col_1.7.1']) and pd.notnull(df['col_1.7.2']):
            return str(incBlnk  + ' ' + '1.7.1' + ' (' + str(df['col_1.7.1']) + ' ) ' + '>=' + '1.7.2' + ' (' + str(df['col_1.7.2']) + ' ) ')
        
        ### If any one element is null
        elif pd.notnull(df['col_1.7.1']) and pd.isnull(df['col_1.7.2']):
            return str(incBlnk  + ' ' + '1.7.1' + ' (' + str(df['col_1.7.1']) + ' ) ' + '>=' + '1.7.2' + ' (' + str(df['col_1.7.2']) + ' ) ')
    
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_1.7.1']) and pd.notnull(df['col_1.7.2']):
            ### INCONSISTENT
            if df['col_1.7.1'] < df['col_1.7.2']:
                return str( inc  + ' ' + '1.7.1' + ' (' + str(df['col_1.7.1']) + ' ) ' + '<' + '1.7.2' + ' (' + str(df['col_1.7.2']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_1.7.1'] >= df['col_1.7.2']:
                return con


    ### 1.8.1.a. + 1.8.1.b. + 1.8.1.c. + 1.8.1.d. <= 2.2
    ### ************************************************
    def res8(df):
        # If all elements are null
        if pd.isnull(df['col_1.8.1.a']) and pd.isnull(df['col_1.8.1.b']) and pd.isnull(df['col_1.8.1.c']) and pd.isnull(df['col_1.8.1.d']) and pd.isnull(df['col_2.2']):
            return str(blnk  + ' ' + '1.8.1.a' + ' (' + str(df['col_1.8.1.a']) + ' ) ' + ' + '  + ' ' + '1.8.1.b' + ' (' + str(df['col_1.8.1.b']) + ' ) ' + ' + '  + ' ' + '1.8.1.c' + ' (' + str(df['col_1.8.1.c']) + ' ) ' + ' + '  + ' ' + '1.8.1.d' + ' (' + str(df['col_1.8.1.d']) + ' ) '  + '<=' + ' ' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ')

        ### If any one element is null
        elif (pd.isnull(df['col_1.8.1.a']) and pd.isnull(df['col_1.8.1.b']) and pd.isnull(df['col_1.8.1.c']) and pd.isnull(df['col_1.8.1.d'])) and pd.notnull(df['col_2.2']):
            return str(incBlnk  + ' ' + '1.8.1.a' + ' (' + str(df['col_1.8.1.a']) + ' ) ' + ' + '  + ' ' + '1.8.1.b' + ' (' + str(df['col_1.8.1.b']) + ' ) ' + ' + '  + ' ' + '1.8.1.c' + ' (' + str(df['col_1.8.1.c']) + ' ) ' + ' + '  + ' ' + '1.8.1.d' + ' (' + str(df['col_1.8.1.d']) + ' ) '  + '<=' + ' ' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ')
        
        ### If any one element is null
        elif (pd.notnull(df['col_1.8.1.a']) and pd.notnull(df['col_1.8.1.b']) and pd.notnull(df['col_1.8.1.c']) and pd.notnull(df['col_1.8.1.d'])) and pd.isnull(df['col_2.2']):
            return str(incBlnk  + ' ' + '1.8.1.a' + ' (' + str(df['col_1.8.1.a']) + ' ) ' + ' + '  + ' ' + '1.8.1.b' + ' (' + str(df['col_1.8.1.b']) + ' ) ' + ' + '  + ' ' + '1.8.1.c' + ' (' + str(df['col_1.8.1.c']) + ' ) ' + ' + '  + ' ' + '1.8.1.d' + ' (' + str(df['col_1.8.1.d']) + ' ) '  + '<=' + ' ' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ')
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif (pd.notnull(df['col_1.8.1.a']) or pd.notnull(df['col_1.8.1.b']) or pd.notnull(df['col_1.8.1.c']) or pd.notnull(df['col_1.8.1.d'])) and pd.notnull(df['col_3.1.1.a']):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif (pd.notnull(df['col_1.8.1.a']) and pd.notnull(df['col_1.8.1.b']) and pd.notnull(df['col_1.8.1.c']) and pd.notnull(df['col_1.8.1.d'])) and pd.notnull(df['col_3.1.1.a']):
            ### INCONSISTENT
            if df['col_1.8.1.a'] + df['col_1.8.1.b'] + df['col_1.8.1.c'] + df['col_1.8.1.d'] > df['col_3.1.1.a']:
                return str( inc  + ' ' + '1.8.1.a' + ' (' + str(df['col_1.8.1.a']) + ' ) ' + ' + '  + ' ' + '1.8.1.b' + ' (' + str(df['col_1.8.1.b']) + ' ) ' + ' + '  + ' ' + '1.8.1.c' + ' (' + str(df['col_1.8.1.c']) + ' ) ' + ' + '  + ' ' + '1.8.1.d' + ' (' + str(df['col_1.8.1.d']) + ' ) '  + '<=' + ' ' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_1.8.1.a'] + df['col_1.8.1.b'] + df['col_1.8.1.c'] + df['col_1.8.1.d'] <= df['col_3.1.1.a']:
                return con
    

    ### 2.2.1 <= 2.2
    ### ************
    def res9(df):
        # If all elements are null
        if pd.isnull(df['col_2.2.1']) and pd.isnull(df['col_2.2']):
            return str(blnk  + ' ' + '2.2.1' + ' (' + str(df['col_2.2.1']) + ' ) ' + '<=' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ')

        ### If any one element is null
        elif pd.isnull(df['col_2.2.1']) and pd.notnull(df['col_2.2']):
            return str(incBlnk  + ' ' + '2.2.1' + ' (' + str(df['col_2.2.1']) + ' ) ' + '<=' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ')
        
        ### If any one element is null
        elif pd.notnull(df['col_2.2.1']) and pd.isnull(df['col_2.2']):
            return str(incBlnk  + ' ' + '2.2.1' + ' (' + str(df['col_2.2.1']) + ' ) ' + '<=' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_2.2.1']) and pd.notnull(df['col_2.2']):
            ### INCONSISTENT
            if df['col_2.2.1'] > df['col_2.2']:
                return str( inc  + ' ' + '2.2.1' + ' (' + str(df['col_2.2.1']) + ' ) ' + '>' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_2.2.1'] <= df['col_2.2']:
                return con


    ### 2.2.2 <= 2.2
    ### ************
    def res10(df):
        # If all elements are null
        if pd.isnull(df['col_2.2.2']) and pd.isnull(df['col_2.2']):
            return str(blnk  + ' ' + '2.2.2' + ' (' + str(df['col_2.2.2']) + ' ) ' + '<=' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ')

        ### If any one element is null
        elif pd.isnull(df['col_2.2.2']) and pd.notnull(df['col_2.2']):
            return str(incBlnk  + ' ' + '2.2.2' + ' (' + str(df['col_2.2.2']) + ' ) ' + '<=' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ')
        
        ### If any one element is null
        elif pd.notnull(df['col_2.2.2']) and pd.isnull(df['col_2.2']):
            return str(incBlnk  + ' ' + '2.2.2' + ' (' + str(df['col_2.2.2']) + ' ) ' + '<=' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_2.2.2']) and pd.notnull(df['col_2.2']):
            ### INCONSISTENT
            if df['col_2.2.2'] > df['col_2.2']:
                return str( inc  + ' ' + '2.2.2' + ' (' + str(df['col_2.2.2']) + ' ) ' + '>' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_2.2.2'] <= df['col_2.2']:
                return con
    

    ### 3.1.1.a + 3.1.1.b + 3.1.3.b >= 2.2 + 2.1.1.a + 2.1.1.b
    ### ******************************************************
    def res11(df):
        ### If all elements are null
        if pd.isnull(df['col_3.1.1.a']) and pd.isnull(df['col_3.1.1.b']) and pd.isnull(df['col_3.1.3.b']) and pd.isnull(df['col_2.2']) and pd.isnull(df['col_2.1.1.a']) and pd.isnull(df['col_2.1.1.b']):
            return str(blnk  + ' ' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ' + ' + ' + ' ' + '3.1.3.b' + ' (' + str(df['col_3.1.3.b']) + ' ) ' + '>=' + ' ' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ' + ' + ' + '2.1.1.a' + ' (' + str(df['col_2.1.1.a']) + ' ) ' + ' + ' + ' ' + '2.1.1.b' + ' (' + str(df['col_2.1.1.b']) + ' ) ' )

        ### If any one element is null
        elif (pd.isnull(df['col_3.1.1.a']) and pd.isnull(df['col_3.1.1.b']) and pd.isnull(df['col_3.1.3.b'])) and (pd.notnull(df['col_2.2']) and pd.notnull(df['col_2.1.1.a']) and pd.notnull(df['col_2.1.1.b'])):
            return str(incBlnk  + ' ' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ' + ' + ' + ' ' + '3.1.3.b' + ' (' + str(df['col_3.1.3.b']) + ' ) ' + '>=' + ' ' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ' + ' + ' + '2.1.1.a' + ' (' + str(df['col_2.1.1.a']) + ' ) ' + ' + ' + ' ' + '2.1.1.b' + ' (' + str(df['col_2.1.1.b']) + ' ) ' )
        
        ### If any one element is null
        elif (pd.notnull(df['col_3.1.1.a']) and pd.notnull(df['col_3.1.1.b']) and pd.notnull(df['col_3.1.3.b'])) and (pd.isnull(df['col_2.2']) and pd.isnull(df['col_2.1.1.a']) and pd.isnull(df['col_2.1.1.b'])):
            return str(incBlnk  + ' ' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ' + ' + ' + ' ' + '3.1.3.b' + ' (' + str(df['col_3.1.3.b']) + ' ) ' + '>=' + ' ' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ' + ' + ' + '2.1.1.a' + ' (' + str(df['col_2.1.1.a']) + ' ) ' + ' + ' + ' ' + '2.1.1.b' + ' (' + str(df['col_2.1.1.b']) + ' ) ' )
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif (pd.notnull(df['col_3.1.1.a']) or pd.notnull(df['col_3.1.1.b']) or pd.notnull(df['col_3.1.3.b'])) and (pd.notnull(df['col_2.2']) or pd.notnull(df['col_2.1.1.a']) or pd.notnull(df['col_2.1.1.b'])):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif (pd.notnull(df['col_3.1.1.a']) and pd.notnull(df['col_3.1.1.b']) and pd.notnull(df['col_3.1.3.b'])) and (pd.notnull(df['col_2.2']) and pd.notnull(df['col_2.1.1.a']) and pd.notnull(df['col_2.1.1.b'])):
            ### INCONSISTENT
            if df['col_3.1.1.a'] + df['col_3.1.1.b'] + df['3.1.3.b'] < df['col_2.1.1.a'] + df['col_2.2'] + df['col_2.1.1.b']:
                return str( inc  + ' ' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ' + ' + ' + ' ' + '3.1.3.b' + ' (' + str(df['col_3.1.3.b']) + ' ) ' + '<' + ' ' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ' + ' + ' + '2.1.1.a' + ' (' + str(df['col_2.1.1.a']) + ' ) ' + ' + ' + ' ' + '2.1.1.b' + ' (' + str(df['col_2.1.1.b']) + ' ) ' )
        
            ### CONSISTENT
            elif df['col_3.1.1.a'] + df['col_3.1.1.b'] + df['3.1.3.b'] >= df['col_2.1.1.a'] + df['col_2.2'] + df['col_2.1.1.b']:
                return con


    ### 3.1.2 <= 3.1.1.a + 3.1.1.b
    ### **************************
    def res12(df):
        # If all elements are null
        if pd.isnull(df['col_3.1.2']) and pd.isnull(df['col_3.1.1.a']) and pd.isnull(df['col_3.1.1.b']):
            return str(blnk  + ' ' + '3.1.2' + ' (' + str(df['col_3.1.2']) + ' ) ' + '<=' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ')

        ### If any one element is null
        elif pd.isnull(df['col_3.1.2']) and ( pd.notnull(df['col_3.1.1.a']) and pd.notnull(df['col_3.1.1.b'])):
            return str(incBlnk  + ' ' + '3.1.2' + ' (' + str(df['col_3.1.2']) + ' ) ' + '<=' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ')
        
        ### If any one element is null
        elif pd.notnull(df['col_3.1.2']) and ( pd.isnull(df['col_3.1.1.a']) and pd.isnull(df['col_3.1.1.b']) ):
            return str(incBlnk  + ' ' + '3.1.2' + ' (' + str(df['col_3.1.2']) + ' ) ' + '<=' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ')
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif pd.notnull(df['col_3.1.2']) and ( pd.notnull(df['col_3.1.1.a']) or pd.notnull(df['col_3.1.1.b']) ):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_3.1.2']) and pd.notnull(df['col_3.1.1.a']) and pd.notnull(df['col_3.1.1.b']):
            ### INCONSISTENT
            if df['col_3.1.2'] > df['col_3.1.1.a'] + df['col_3.1.1.b']:
                return str( inc  + ' ' + '3.1.2' + ' (' + str(df['col_3.1.2']) + ' ) ' + '<=' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_3.1.2'] <= df['col_3.1.1.a'] + df['col_3.1.1.b']:
                return con
    

    ### 2.3 = 2.2 + 2.1.1.a + 2.1.1.b
    ### *****************************
    def res13(df):
        # If all elements are null
        if pd.isnull(df['col_2.3']) and pd.isnull(df['col_2.2']) and pd.isnull(df['col_2.1.1.a']) and pd.isnull(df['col_2.1.1.b'])  :
            return str(blnk  + ' ' + '2.3' + ' (' + str(df['col_2.3']) + ' ) ' + '==' + ' ' + '2.2 (' + str(df['col_2.2']) + ' ) ' + ' + ' + ' ' +  '2.1.1.a (' + str(df['col_2.1.1.a']) + ' ) ' + ' + ' + ' ' +  '2.1.1.b (' + str(df['col_2.1.1.b']) + ' ) ')

        ### If all left elements are null
        elif (pd.isnull(df['col_2.3'])) and (pd.notnull(df['col_2.2']) and pd.notnull(df['col_2.1.1.a']) and pd.notnull(df['col_2.1.1.b'])):
            return str(incBlnk  + ' ' + '2.3' + ' (' + str(df['col_2.3']) + ' ) ' + '==' + ' ' + '2.2 (' + str(df['col_2.2']) + ' ) ' + ' + ' + ' ' +  '2.1.1.a (' + str(df['col_2.1.1.a']) + ' ) ' + ' + ' + ' ' +  '2.1.1.b (' + str(df['col_2.1.1.b']) + ' ) ')
        
        ### If all right elements are null
        elif (pd.notnull(df['col_2.3'])) and (pd.isnull(df['col_2.2']) and pd.isnull(df['col_2.1.1.a']) and pd.isnull(df['col_2.1.1.b'])):
            return str(incBlnk  + ' ' + '2.3' + ' (' + str(df['col_2.3']) + ' ) ' + '==' + ' ' + '2.2 (' + str(df['col_2.2']) + ' ) ' + ' + ' + ' ' +  '2.1.1.a (' + str(df['col_2.1.1.a']) + ' ) ' + ' + ' + ' ' +  '2.1.1.b (' + str(df['col_2.1.1.b']) + ' ) ')
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif (pd.notnull(df['col_2.3'])) and (pd.notnull(df['col_2.2']) or pd.notnull(df['col_2.1.1.a']) or pd.notnull(df['col_2.1.1.b'])):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif (pd.notnull(df['col_2.3'])) and (pd.notnull(df['col_2.2']) and pd.notnull(df['col_2.1.1.a']) or pd.notnull(df['col_2.1.1.b'])):
            ### INCONSISTENT
            if df['col_3.1.2'] != df['col_2.2'] + df['col_2.1.1.a'] + df['col_2.1.1.b']:
                return str( inc  + ' ' + '2.3' + ' (' + str(df['col_2.3']) + ' ) ' + '==' + ' ' + '2.2 (' + str(df['col_2.2']) + ' ) ' + ' + ' + ' ' +  '2.1.1.a (' + str(df['col_2.1.1.a']) + ' ) ' + ' + ' + ' ' +  '2.1.1.b (' + str(df['col_2.1.1.b']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_3.1.2'] == df['col_2.2'] + df['col_2.1.1.a'] + df['col_2.1.1.b']:
                return con



    ### 3.1.1.a + 3.1.1.b + 3.1.3.a + 3.1.3.b >= 2.2 + 2.1.1.a + 2.1.1.b
    ### ****************************************************************
    def res14(df):
        ### If all elements are null
        if pd.isnull(df['col_3.1.1.a']) and pd.isnull(df['col_3.1.1.b']) and pd.isnull(df['col_3.1.3.a']) and pd.isnull(df['col_3.1.3.b']) and pd.isnull(df['col_2.2']) and pd.isnull(df['col_2.1.1.a']) and pd.isnull(df['col_2.1.1.b']):
            return str(blnk  + ' ' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ' + ' + ' + ' ' + '3.1.3.b' + ' (' + str(df['col_3.1.3.b']) + ' ) ' + '>=' + ' ' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ' + ' + ' + '2.1.1.a' + ' (' + str(df['col_2.1.1.a']) + ' ) ' + ' + ' + ' ' + '2.1.1.b' + ' (' + str(df['col_2.1.1.b']) + ' ) ' )

        ### If all left elements are null
        elif (pd.isnull(df['col_3.1.1.a']) and pd.isnull(df['col_3.1.1.b']) and pd.isnull(df['col_3.1.3.a']) and pd.isnull(df['col_3.1.3.b'])) and (pd.notnull(df['col_2.2']) and pd.notnull(df['col_2.1.1.a']) and pd.notnull(df['col_2.1.1.b'])):
            return str(incBlnk  + ' ' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ' + ' + ' + ' ' + '3.1.3.b' + ' (' + str(df['col_3.1.3.b']) + ' ) ' + '>=' + ' ' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ' + ' + ' + '2.1.1.a' + ' (' + str(df['col_2.1.1.a']) + ' ) ' + ' + ' + ' ' + '2.1.1.b' + ' (' + str(df['col_2.1.1.b']) + ' ) ' )
        
        ### If all right elements are null
        elif (pd.notnull(df['col_3.1.1.a']) and pd.notnull(df['col_3.1.1.b']) and pd.notnull(df['col_3.1.3.a']) and pd.notnull(df['col_3.1.3.b'])) and (pd.isnull(df['col_2.2']) and pd.isnull(df['col_2.1.1.a']) and pd.isnull(df['col_2.1.1.b'])):
            return str(incBlnk  + ' ' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ' + ' + ' + ' ' + '3.1.3.b' + ' (' + str(df['col_3.1.3.b']) + ' ) ' + '>=' + ' ' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ' + ' + ' + '2.1.1.a' + ' (' + str(df['col_2.1.1.a']) + ' ) ' + ' + ' + ' ' + '2.1.1.b' + ' (' + str(df['col_2.1.1.b']) + ' ) ' )
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif (pd.notnull(df['col_3.1.1.a']) and pd.notnull(df['col_3.1.1.b']) and pd.notnull(df['col_3.1.3.a']) and pd.notnull(df['col_3.1.3.b'])) and (pd.notnull(df['col_2.2']) or pd.notnull(df['col_2.1.1.a']) or pd.notnull(df['col_2.1.1.b'])):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif (pd.notnull(df['col_3.1.1.a']) and pd.notnull(df['col_3.1.1.b']) and pd.notnull(df['col_3.1.3.a']) and pd.notnull(df['col_3.1.3.b'])) and (pd.notnull(df['col_2.2']) and pd.notnull(df['col_2.1.1.a']) and pd.notnull(df['col_2.1.1.b'])):
            ### INCONSISTENT
            if df['col_3.1.1.a'] + df['col_3.1.1.b'] + df['3.1.3.a'] + df['3.1.3.b'] < df['col_2.1.1.a'] + df['col_2.2'] + df['col_2.1.1.b']:
                return str( inc  + ' ' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ' + ' + ' + ' ' + '3.1.3.b' + ' (' + str(df['col_3.1.3.b']) + ' ) ' + '<' + ' ' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ' + ' + ' + '2.1.1.a' + ' (' + str(df['col_2.1.1.a']) + ' ) ' + ' + ' + ' ' + '2.1.1.b' + ' (' + str(df['col_2.1.1.b']) + ' ) ' )
        
            ### CONSISTENT
            elif df['col_3.1.1.a'] + df['col_3.1.1.b'] + df['3.1.3.a'] + df['3.1.3.b'] >= df['col_2.1.1.a'] + df['col_2.2'] + df['col_2.1.1.b']:
                return con


    ### 3.1.1.a + 3.1.1.b + 3.1.3.a + 3.1.3.b >= 2.3
    ### ********************************************
    def res15(df):
        # If all elements are null
        if pd.isnull(df['col_3.1.1.a']) and pd.isnull(df['col_3.1.1.b']) and pd.isnull(df['col_3.1.3.a']) and pd.isnull(df['col_3.1.3.b']) and pd.isnull(df['col_2.3']) :
            return str(blnk  + ' ' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + ' ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ' + ' + ' + ' ' + '3.1.3.a' + ' (' + str(df['col_3.1.3.a']) + ' ) ' + ' + ' + ' ' + '3.1.3.b' + ' (' + str(df['col_3.1.3.b']) + ' ) '  + '>=' + '2.3' + ' (' + str(df['col_2.3']) )

        ### If all left elements are null
        elif (pd.isnull(df['col_3.1.1.a']) and pd.isnull(df['col_3.1.1.b']) and pd.isnull(df['col_3.1.3.a']) and pd.isnull(df['col_3.1.3.b'])) and (pd.notnull(df['col_2.3'])):
            return str(incBlnk  + ' ' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ' + ' + ' + ' ' + '3.1.3.b' + ' (' + str(df['col_3.1.3.b']) + ' ) ' + '>=' + ' ' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ' + ' + ' + '2.1.1.a' + ' (' + str(df['col_2.1.1.a']) + ' ) ' + ' + ' + ' ' + '2.1.1.b' + ' (' + str(df['col_2.1.1.b']) + ' ) ' )
        
        ### If all right elements are null
        elif (pd.notnull(df['col_3.1.1.a']) and pd.notnull(df['col_3.1.1.b']) and pd.notnull(df['col_3.1.3.a']) and pd.notnull(df['col_3.1.3.b'])) and (pd.isnull(df['col_2.3'])):
            return str(incBlnk  + ' ' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ' + ' + ' + ' ' + '3.1.3.b' + ' (' + str(df['col_3.1.3.b']) + ' ) ' + '>=' + ' ' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ' + ' + ' + '2.1.1.a' + ' (' + str(df['col_2.1.1.a']) + ' ) ' + ' + ' + ' ' + '2.1.1.b' + ' (' + str(df['col_2.1.1.b']) + ' ) ' )
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif (pd.notnull(df['col_3.1.1.a']) or pd.notnull(df['col_3.1.1.b']) or pd.notnull(df['col_3.1.3.a']) or pd.notnull(df['col_3.1.3.b'])) and (pd.notnull(df['col_2.3'])):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif (pd.notnull(df['col_3.1.1.a']) and pd.notnull(df['col_3.1.1.b']) and pd.notnull(df['col_3.1.3.a']) and pd.notnull(df['col_3.1.3.b'])) and (pd.notnull(df['col_2.3'])):
            ### INCONSISTENT
            if df['col_3.1.1.a'] + df['col_3.1.1.b'] + df['3.1.3.a'] + df['3.1.3.b'] < df['col_2.3']:
                return str( inc  + ' ' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ' + ' + ' + ' ' + '3.1.3.b' + ' (' + str(df['col_3.1.3.b']) + ' ) ' + '<' + ' ' + '2.2' + ' (' + str(df['col_2.2']) + ' ) ' + ' + ' + '2.1.1.a' + ' (' + str(df['col_2.1.1.a']) + ' ) ' + ' + ' + ' ' + '2.1.1.b' + ' (' + str(df['col_2.1.1.b']) + ' ) ' )
        
            ### CONSISTENT
            elif df['col_3.1.1.a'] + df['col_3.1.1.b'] + df['3.1.3.a'] + df['3.1.3.b'] >= df['col_2.3']:
                return con


    ### 3.4.1 <= 3.1.1.a + 3.1.1.b
    ### **************************
    def res16(df):
        ### If all elements are null
        if pd.isnull(df['col_3.4.1']) and pd.isnull(df['col_3.1.1.a']) and pd.isnull(df['col_3.1.1.b']):
            return str(blnk  + ' ' + '3.4.1' + ' (' + str(df['col_3.4.1']) + ' ) ' + '<=' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_3.4.1']) and ( pd.notnull(df['col_3.1.1.a']) and pd.notnull(df['col_3.1.1.b'])):
            return str(incBlnk  + ' ' + '3.4.1' + ' (' + str(df['col_3.4.1']) + ' ) ' + '<=' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ')
        
        ### If all left elements are null
        elif pd.notnull(df['col_3.4.1']) and ( pd.isnull(df['col_3.1.1.a']) and pd.isnull(df['col_3.1.1.b']) ):
            return str(incBlnk  + ' ' + '3.4.1' + ' (' + str(df['col_3.4.1']) + ' ) ' + '<=' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ')
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif pd.notnull(df['col_3.4.1']) and ( pd.notnull(df['col_3.1.1.a']) or pd.notnull(df['col_3.1.1.b']) ):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_3.4.1']) and pd.notnull(df['col_3.1.1.a']) and pd.notnull(df['col_3.1.1.b']):
            ### INCONSISTENT
            if df['col_3.4.1'] > df['col_3.1.1.a'] + df['col_3.1.1.b']:
                return str( inc  + ' ' + '3.4.1' + ' (' + str(df['col_3.4.1']) + ' ) ' + '<=' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_3.4.1'] <= df['col_3.1.1.a'] + df['col_3.1.1.b']:
                return con
    

    ### 3.4.2 <= 3.4.1
    ### **************
    def res17(df):
        # If all elements are null
        if pd.isnull(df['col_3.4.2']) and pd.isnull(df['col_3.4.1']):
            return str(blnk  + ' ' + '3.4.2' + ' (' + str(df['col_3.4.2']) + ' ) ' + '<=' + '3.4.1' + ' (' + str(df['col_3.4.1']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_3.4.2']) and pd.notnull(df['col_3.4.1']):
            return str(incBlnk  + ' ' + '3.4.2' + ' (' + str(df['col_3.4.2']) + ' ) ' + '<=' + '3.4.1' + ' (' + str(df['col_3.4.1']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_3.4.2']) and pd.isnull(df['col_3.4.1']):
            return str(incBlnk  + ' ' + '3.4.2' + ' (' + str(df['col_3.4.2']) + ' ) ' + '<=' + '3.4.1' + ' (' + str(df['col_3.4.1']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_3.4.2']) and pd.notnull(df['col_3.4.1']):
            ### INCONSISTENT
            if df['col_3.4.2'] > df['col_3.4.1']:
                return str( inc  + ' ' + '3.4.2' + ' (' + str(df['col_3.4.2']) + ' ) ' + '>' + '3.4.1' + ' (' + str(df['col_3.4.1']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_3.4.2'] <= df['col_3.4.1']:
                return con
    

    ### 3.4.2.a <= 3.4.2
    ### ****************
    def res18(df):
        # If all elements are null
        if pd.isnull(df['col_3.4.2.a']) and pd.isnull(df['col_3.4.2']):
            return str(blnk  + ' ' + '3.4.2.a' + ' (' + str(df['col_3.4.2.a']) + ' ) ' + '<=' + '3.4.2' + ' (' + str(df['col_3.4.2']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_3.4.2.a']) and pd.notnull(df['col_3.4.2']):
            return str(incBlnk  + ' ' + '3.4.2.a' + ' (' + str(df['col_3.4.2.a']) + ' ) ' + '<=' + '3.4.2' + ' (' + str(df['col_3.4.2']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_3.4.2.a']) and pd.isnull(df['col_3.4.2']):
            return str(incBlnk  + ' ' + '3.4.2.a' + ' (' + str(df['col_3.4.2.a']) + ' ) ' + '<=' + '3.4.2' + ' (' + str(df['col_3.4.2']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_3.4.2.a']) and pd.notnull(df['col_3.4.2']):
            ### INCONSISTENT
            if df['col_3.4.2.a'] > df['col_3.4.2']:
                return str( inc  + ' ' + '3.4.2.a' + ' (' + str(df['col_3.4.2.a']) + ' ) ' + '<=' + '3.4.2' + ' (' + str(df['col_3.4.2']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_3.4.2.a'] <= df['col_3.4.2']:
                return con
    


    ### 3.4.3 <= 3.1.1.a + 3.1.1.b
    ### **************************
    def res19(df):
        ### If all elements are null
        if pd.isnull(df['col_3.4.3']) and pd.isnull(df['col_3.1.1.a']) and pd.isnull(df['col_3.1.1.b']):
            return str(blnk  + ' ' + '3.4.3' + ' (' + str(df['col_3.4.3']) + ' ) ' + '<=' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_3.4.3']) and ( pd.notnull(df['col_3.1.1.a']) and pd.notnull(df['col_3.1.1.b'])):
            return str(incBlnk  + ' ' + '3.4.3' + ' (' + str(df['col_3.4.3']) + ' ) ' + '<=' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ')
        
        ### If all left elements are null
        elif pd.notnull(df['col_3.4.3']) and ( pd.isnull(df['col_3.1.1.a']) and pd.isnull(df['col_3.1.1.b']) ):
            return str(incBlnk  + ' ' + '3.4.3' + ' (' + str(df['col_3.4.3']) + ' ) ' + '<=' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ')
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif pd.notnull(df['col_3.4.3']) and ( pd.notnull(df['col_3.1.1.a']) or pd.notnull(df['col_3.1.1.b']) ):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_3.4.3']) and pd.notnull(df['col_3.1.1.a']) and pd.notnull(df['col_3.1.1.b']):
            ### INCONSISTENT
            if df['col_3.4.3'] > df['col_3.1.1.a'] + df['col_3.1.1.b']:
                return str( inc  + ' ' + '3.4.3' + ' (' + str(df['col_3.4.3']) + ' ) ' + '>' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_3.4.3'] <= df['col_3.1.1.a'] + df['col_3.1.1.b']:
                return con
            

    ### 3.4.4 <= 3.1.1.a + 3.1.1.b
    ### **************************
    def res20(df):
        ### If all elements are null
        if pd.isnull(df['col_3.4.4']) and pd.isnull(df['col_3.1.1.a']) and pd.isnull(df['col_3.1.1.b']):
            return str(blnk  + ' ' + '3.4.4' + ' (' + str(df['col_3.4.4']) + ' ) ' + '<=' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_3.4.4']) and ( pd.notnull(df['col_3.1.1.a']) and pd.notnull(df['col_3.1.1.b'])):
            return str(incBlnk  + ' ' + '3.4.4' + ' (' + str(df['col_3.4.4']) + ' ) ' + '<=' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ')
        
        ### If all left elements are null
        elif pd.notnull(df['col_3.4.4']) and ( pd.isnull(df['col_3.1.1.a']) and pd.isnull(df['col_3.1.1.b']) ):
            return str(incBlnk  + ' ' + '3.4.4' + ' (' + str(df['col_3.4.4']) + ' ) ' + '<=' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ')
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif pd.notnull(df['col_3.4.4']) and ( pd.notnull(df['col_3.1.1.a']) or pd.notnull(df['col_3.1.1.b']) ):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_3.4.4']) and pd.notnull(df['col_3.1.1.a']) and pd.notnull(df['col_3.1.1.b']):
            ### INCONSISTENT
            if df['col_3.4.4'] > df['col_3.1.1.a'] + df['col_3.1.1.b']:
                return str( inc  + ' ' + '3.4.4' + ' (' + str(df['col_3.4.4']) + ' ) ' + '>' + '3.1.1.a' + ' (' + str(df['col_3.1.1.a']) + ' ) ' + ' + ' + '3.1.1.b' + ' (' + str(df['col_3.1.1.b']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_3.4.4'] <= df['col_3.1.1.a'] + df['col_3.1.1.b']:
                return con
    

    ### 3.5.1.a <= 3.5.1
    ### ****************
    def res21(df):
        ### If all elements are null
        if pd.isnull(df['col_3.5.1.a']) and pd.isnull(df['col_3.5.1']):
            return str(blnk  + ' ' + '3.5.1.a' + ' (' + str(df['col_3.5.1.a']) + ' ) ' + '<=' + '3.5.1' + ' (' + str(df['col_3.5.1']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_3.5.1.a']) and pd.notnull(df['col_3.5.1']):
            return str(incBlnk  + ' ' + '3.5.1.a' + ' (' + str(df['col_3.5.1.a']) + ' ) ' + '<=' + '3.5.1' + ' (' + str(df['col_3.5.1']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_3.5.1.a']) and pd.isnull(df['col_3.5.1']):
            return str(incBlnk  + ' ' + '3.5.1.a' + ' (' + str(df['col_3.5.1.a']) + ' ) ' + '<=' + '3.5.1' + ' (' + str(df['col_3.5.1']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_3.5.1.a']) and pd.notnull(df['col_3.5.1']):
            ### INCONSISTENT
            if df['col_3.5.1.a'] > df['col_3.5.1']:
                return str( inc  + ' ' + '3.5.1.a' + ' (' + str(df['col_3.5.1.a']) + ' ) ' + '>' + '3.5.1' + ' (' + str(df['col_3.5.1']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_3.5.1.a'] <= df['col_3.5.1']:
                return con


    ### 6.1.1.a <= 6.1.1
    ### ****************
    def res22(df):
        # If all elements are null
        if pd.isnull(df['col_6.1.1.a']) and pd.isnull(df['col_6.1.1']):
            return str(blnk  + ' ' + '6.1.1.a' + ' (' + str(df['col_6.1.1.a']) + ' ) ' + '<=' + '6.1.1' + ' (' + str(df['col_6.1.1']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_6.1.1.a']) and pd.notnull(df['col_6.1.1']):
            return str(incBlnk  + ' ' + '6.1.1.a' + ' (' + str(df['col_6.1.1.a']) + ' ) ' + '<=' + '6.1.1' + ' (' + str(df['col_6.1.1']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_6.1.1.a']) and pd.isnull(df['col_6.1.1']):
            return str(incBlnk  + ' ' + '6.1.1.a' + ' (' + str(df['col_6.1.1.a']) + ' ) ' + '<=' + '6.1.1' + ' (' + str(df['col_6.1.1']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_6.1.1.a']) and pd.notnull(df['col_6.1.1']):
            ### INCONSISTENT
            if df['col_6.1.1.a'] > df['col_6.1.1']:
                return str( inc  + ' ' + '6.1.1.a' + ' (' + str(df['col_6.1.1.a']) + ' ) ' + '<=' + '6.1.1' + ' (' + str(df['col_6.1.1']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_6.1.1.a'] <= df['col_6.1.1']:
                return con
    

    ### 6.1.2.a <= 6.1.2
    ### ****************
    def res23(df):
        # If all elements are null
        if pd.isnull(df['col_6.1.2.a']) and pd.isnull(df['col_6.1.2']):
            return str(blnk  + ' ' + '6.1.2.a' + ' (' + str(df['col_6.1.2.a']) + ' ) ' + '<=' + '6.1.2' + ' (' + str(df['col_6.1.2']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_6.1.1.a']) and pd.notnull(df['col_6.1.1']):
            return str(incBlnk  + ' ' + '6.1.2.a' + ' (' + str(df['col_6.1.2.a']) + ' ) ' + '<=' + '6.1.2' + ' (' + str(df['col_6.1.2']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_6.1.1.a']) and pd.isnull(df['col_6.1.1']):
            return str(incBlnk  + ' ' + '6.1.2.a' + ' (' + str(df['col_6.1.2.a']) + ' ) ' + '<=' + '6.1.2' + ' (' + str(df['col_6.1.2']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_6.1.1.a']) and pd.notnull(df['col_6.1.1']):
            ### INCONSISTENT
            if df['col_6.1.1.a'] > df['col_6.1.1']:
                return str( inc  + ' ' + '6.1.2.a' + ' (' + str(df['col_6.1.2.a']) + ' ) ' + '<=' + '6.1.2' + ' (' + str(df['col_6.1.2']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_6.1.1.a'] <= df['col_6.1.1']:
                return con



    ### 6.1.3.a <= 6.1.3
    ### ****************
    def res24(df):
        # If all elements are null
        if pd.isnull(df['col_6.1.3.a']) and pd.isnull(df['col_6.1.3']):
            return str(blnk  + ' ' + '6.1.3.a' + ' (' + str(df['col_6.1.3.a']) + ' ) ' + '<=' + '6.1.3' + ' (' + str(df['col_6.1.3']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_6.1.3.a']) and pd.notnull(df['col_6.1.3']):
            return str(incBlnk  + ' ' + '6.1.3.a' + ' (' + str(df['col_6.1.3.a']) + ' ) ' + '<=' + '6.1.3' + ' (' + str(df['col_6.1.3']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_6.1.3.a']) and pd.isnull(df['col_6.1.3']):
            return str(incBlnk  + ' ' + '6.1.3.a' + ' (' + str(df['col_6.1.3.a']) + ' ) ' + '<=' + '6.1.3' + ' (' + str(df['col_6.1.3']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_6.1.3.a']) and pd.notnull(df['col_6.1.3']):
            ### INCONSISTENT
            if df['col_6.1.3.a'] > df['col_6.1.3']:
                return str( inc  + ' ' + '6.1.3.a' + ' (' + str(df['col_6.1.3.a']) + ' ) ' + '>' + '6.1.3' + ' (' + str(df['col_6.1.3']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_6.1.3.a'] <= df['col_6.1.3']:
                return con
    


    ### 10.1.1.b + 10.1.1.c + 10.1.1.d >= 10.1.1.a
    ### ******************************************
    def res25(df):
        # If all elements are null
        if pd.isnull(df['col_10.1.1.b']) and pd.isnull(df['col_10.1.1.c']) and pd.isnull(df['col_10.1.1.d']) and pd.isnull(df['col_10.1.1.a']) :
            return str( blnk  + ' ' + '10.1.1.b' + ' (' + str(df['col_10.1.1.b']) + ' ) ' + ' + ' + '10.1.1.c' + ' (' + str(df['col_10.1.1.c']) + ' ) ' + ' + ' + '10.1.1.d' + ' (' + str(df['col_10.1.1.d']) + ' ) ' + ' ' + '>=' + ' ' + '10.1.1.a' + ' (' + str(df['col_10.1.1.a']) + ' ) '  )

        ### If all left elements are null
        elif (pd.isnull(df['col_10.1.1.b']) and pd.notnull(df['col_10.1.1.c']) and pd.notnull(df['col_10.1.1.d'])) and (pd.notnull(df['col_10.1.1.a'])):
            return str(incBlnk  + ' ' + '10.1.1.b' + ' (' + str(df['col_10.1.1.b']) + ' ) ' + ' + ' + '10.1.1.c' + ' (' + str(df['col_10.1.1.c']) + ' ) ' + ' + ' + '10.1.1.d' + ' (' + str(df['col_10.1.1.d']) + ' ) ' + ' ' + '>=' + ' ' + '10.1.1.a' + ' (' + str(df['col_10.1.1.a']) + ' ) '  )
        
        ### If all right elements are null
        elif (pd.isnull(df['col_10.1.1.b']) and pd.isnull(df['col_10.1.1.c']) and pd.isnull(df['col_10.1.1.d'])) and (pd.isnull(df['col_10.1.1.a'])):
            return str(incBlnk  + ' ' + '10.1.1.b' + ' (' + str(df['col_10.1.1.b']) + ' ) ' + ' + ' + '10.1.1.c' + ' (' + str(df['col_10.1.1.c']) + ' ) ' + ' + ' + '10.1.1.d' + ' (' + str(df['col_10.1.1.d']) + ' ) ' + ' ' + '>=' + ' ' + '10.1.1.a' + ' (' + str(df['col_10.1.1.a']) + ' ) '  )
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif (pd.notnull(df['col_10.1.1.b']) or pd.notnull(df['col_10.1.1.c']) or pd.notnull(df['col_10.1.1.d'])) and (pd.notnull(df['col_10.1.1.a'])):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif (pd.notnull(df['col_10.1.1.b'])) and (pd.notnull(df['col_10.1.1.c']) and pd.notnull(df['col_10.1.1.d']) or pd.notnull(df['col_10.1.1.a'])):
            ### INCONSISTENT
            if df['col_10.1.1.b'] + df['col_10.1.1.c'] + df['col_10.1.1.d'] < df['col_10.1.1.a']:
                return str( inc  + ' ' + '10.1.1.b' + ' (' + str(df['col_10.1.1.b']) + ' ) ' + ' + ' + '10.1.1.c' + ' (' + str(df['col_10.1.1.c']) + ' ) ' + ' + ' + '10.1.1.d' + ' (' + str(df['col_10.1.1.d']) + ' ) ' + ' ' + '<' + ' ' + '10.1.1.a' + ' (' + str(df['col_10.1.1.a']) + ' ) '  )
        
            ### CONSISTENT
            elif df['col_10.1.1.b'] + df['col_10.1.1.c'] + df['col_10.1.1.d'] < df['col_10.1.1.a']:
                return con



    ### 12.3 <= 12.2
    ### ************
    def res26(df):
        # If all elements are null
        if pd.isnull(df['col_12.3']) and pd.isnull(df['col_12.2']):
            return str(blnk  + ' ' + '12.3' + ' (' + str(df['col_12.3']) + ' ) ' + '<=' + '12.2' + ' (' + str(df['col_12.2']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_12.3']) and pd.notnull(df['col_12.2']):
            return str(incBlnk  + ' ' + '12.3' + ' (' + str(df['col_12.3']) + ' ) ' + '<=' + '12.2' + ' (' + str(df['col_12.2']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_12.3']) and pd.isnull(df['col_12.2']):
            return str(incBlnk  + ' ' + '12.3' + ' (' + str(df['col_12.3']) + ' ) ' + '<=' + '12.2' + ' (' + str(df['col_12.2']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_12.3']) and pd.notnull(df['col_12.2']):
            ### INCONSISTENT
            if df['col_12.3'] > df['col_12.2']:
                return str( inc  + ' ' + '12.3' + ' (' + str(df['col_12.3']) + ' ) ' + '>' + '12.2' + ' (' + str(df['col_12.2']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_12.3'] <= df['col_12.2']:
                return con
    

    ### 12.4 <= 12.3.a
    ### **************
    def res27(df):
        # If all elements are null
        if pd.isnull(df['col_12.4']) and pd.isnull(df['col_12.3.a']):
            return str(blnk  + ' ' + '12.4' + ' (' + str(df['col_12.4']) + ' ) ' + '<=' + '12.3.a' + ' (' + str(df['col_12.3.a']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_12.4']) and pd.notnull(df['col_12.3.a']):
            return str(incBlnk  + ' ' + '12.4' + ' (' + str(df['col_12.4']) + ' ) ' + '<=' + '12.3.a' + ' (' + str(df['col_12.3.a']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_12.4']) and pd.isnull(df['col_12.3.a']):
            return str(incBlnk  + ' ' + '12.4' + ' (' + str(df['col_12.4']) + ' ) ' + '<=' + '12.3.a' + ' (' + str(df['col_12.3.a']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_12.4']) and pd.notnull(df['col_12.3.a']):
            ### INCONSISTENT
            if df['col_12.4'] > df['col_12.3.a']:
                return str( inc  + ' ' + '12.4' + ' (' + str(df['col_12.4']) + ' ) ' + '>' + '12.3.a' + ' (' + str(df['col_12.3.a']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_12.4'] <= df['col_12.3.a']:
                return con
            
    

    ### 12.5 <= 12.3.b
    ### **************
    def res28(df):
        # If all elements are null
        if pd.isnull(df['col_12.5']) and pd.isnull(df['col_12.3.b']):
            return str(blnk  + ' ' + '12.5' + ' (' + str(df['col_12.5']) + ' ) ' + '<=' + '12.3.b' + ' (' + str(df['col_12.3.b']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_12.5']) and pd.notnull(df['col_12.3.b']):
            return str(incBlnk  + ' ' + '12.5' + ' (' + str(df['col_12.5']) + ' ) ' + '<=' + '12.3.b' + ' (' + str(df['col_12.3.b']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_12.5']) and pd.isnull(df['col_12.3.b']):
            return str(incBlnk  + ' ' + '12.5' + ' (' + str(df['col_12.5']) + ' ) ' + '<=' + '12.3.b' + ' (' + str(df['col_12.3.b']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_12.5']) and pd.notnull(df['col_12.3.b']):
            ### INCONSISTENT
            if df['col_12.5'] > df['col_12.3.b']:
                return str( inc  + ' ' + '12.5' + ' (' + str(df['col_12.5']) + ' ) ' + '>' + '12.3.b' + ' (' + str(df['col_12.3.b']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_12.5'] <= df['col_12.3.b']:
                return con
    

    ### 12.6 <= 12.4 + 12.5
    ### *******************
    def res29(df):
        # If all elements are null
        if pd.isnull(df['col_12.6']) and pd.isnull(df['col_12.4']) or pd.isnull(df['col_12.5'])  :
            return str(blnk  + ' ' + '12.6' + ' (' + str(df['col_12.6']) + ' ) ' + '<=' + '12.4' + ' (' + str(df['col_12.4']) + ' ) ' + ' + ' + '12.5' + ' (' + str(df['col_12.5']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_12.6']) and ( pd.notnull(df['col_12.4']) and pd.notnull(df['col_12.5'])):
            return str(incBlnk  + ' ' + '12.6' + ' (' + str(df['col_12.6']) + ' ) ' + '<=' + '12.4' + ' (' + str(df['col_12.4']) + ' ) ' + ' + ' + '12.5' + ' (' + str(df['col_12.5']) + ' ) ')
        
        ### If all left elements are null
        elif pd.notnull(df['col_12.6']) and ( pd.isnull(df['col_12.4']) and pd.isnull(df['col_12.5']) ):
            return str(incBlnk  + ' ' + '12.6' + ' (' + str(df['col_12.6']) + ' ) ' + '<=' + '12.4' + ' (' + str(df['col_12.4']) + ' ) ' + ' + ' + '12.5' + ' (' + str(df['col_12.5']) + ' ) ')
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif pd.notnull(df['col_12.6']) and ( pd.notnull(df['col_12.4']) or pd.notnull(df['col_12.5']) ):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_12.6']) and pd.notnull(df['col_12.4']) and pd.notnull(df['col_12.5']):
            ### INCONSISTENT
            if df['col_12.6'] > df['col_12.4'] + df['col_12.5']:
                return str( inc  + ' ' + '12.6' + ' (' + str(df['col_12.6']) + ' ) ' + '>' + '12.4' + ' (' + str(df['col_12.4']) + ' ) ' + ' + ' + '12.5' + ' (' + str(df['col_12.5']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_12.6'] <= df['col_12.4'] + df['col_12.5']:
                return con
    

    ### 12.4 + 12.5 <= 12.2
    ### *******************
    def res30(df):
        # If all elements are null
        if pd.isnull(df['col_12.4']) and pd.isnull(df['col_12.5']) and pd.isnull(df['col_12.2']):
            return str(blnk  + ' ' + '12.4' + ' (' + str(df['col_12.4']) + ' ) ' + ' + ' + ' ' + '12.5' + ' (' + str(df['col_12.5']) + ' ) ' + '<=' + '12.2' + ' (' + str(df['col_12.2']) + ' ) ')

        elif pd.isnull(df['col_12.4']) and ( pd.notnull(df['col_12.5']) and pd.notnull(df['col_12.2'])):
            return str(incBlnk  + ' ' + '12.4' + ' (' + str(df['col_12.4']) + ' ) ' + ' + ' + ' ' + '12.5' + ' (' + str(df['col_12.5']) + ' ) ' + '<=' + '12.2' + ' (' + str(df['col_12.2']) + ' ) ')
        
        ### If all left elements are null
        elif pd.notnull(df['col_12.4']) and ( pd.isnull(df['col_12.5']) and pd.isnull(df['col_12.2']) ):
            return str(incBlnk  + ' ' + '12.4' + ' (' + str(df['col_12.4']) + ' ) ' + ' + ' + ' ' + '12.5' + ' (' + str(df['col_12.5']) + ' ) ' + '<=' + '12.2' + ' (' + str(df['col_12.2']) + ' ) ')
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif (pd.notnull(df['col_12.4']) or pd.notnull(df['col_12.5'])) and (pd.notnull(df['col_12.2'])):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_12.4']) and pd.notnull(df['col_12.5']) and pd.notnull(df['col_12.2']):
            ### INCONSISTENT
            if df['col_12.4'] > df['col_12.5'] + df['col_12.2']:
                return str( inc  + ' ' + '12.4' + ' (' + str(df['col_12.4']) + ' ) ' + ' + ' + ' ' + '12.5' + ' (' + str(df['col_12.5']) + ' ) ' + '>' + '12.2' + ' (' + str(df['col_12.2']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_12.4'] <= df['col_12.5'] + df['col_12.2']:
                return con



    ### 12.6 <= 12.2
    ### ************
    def res31(df):
        # If all elements are null
        if pd.isnull(df['col_12.6']) and pd.isnull(df['col_12.2']):
            return str(blnk  + ' ' + '12.6' + ' (' + str(df['col_12.6']) + ' ) ' + '<=' + '12.2' + ' (' + str(df['col_12.2']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_12.6']) and pd.notnull(df['col_12.2']):
            return str(incBlnk  + ' ' + '12.6' + ' (' + str(df['col_12.6']) + ' ) ' + '<=' + '12.2' + ' (' + str(df['col_12.2']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_12.6']) and pd.isnull(df['col_12.2']):
            return str(incBlnk  + ' ' + '12.6' + ' (' + str(df['col_12.6']) + ' ) ' + '<=' + '12.2' + ' (' + str(df['col_12.2']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_12.6']) and pd.notnull(df['col_12.2']):
            ### INCONSISTENT
            if df['col_12.6'] > df['col_12.2']:
                return str( inc  + ' ' + '12.6' + ' (' + str(df['col_12.6']) + ' ) ' + '>' + '12.2' + ' (' + str(df['col_12.2']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_12.6'] <= df['col_12.2']:
                return con



    ### 13.2.1 + 13.2.2 >= 13.1.1 + 13.1.2 + 13.1.3 +13.1.4 + 13.1.5 + 13.1.6 + 13.1.7 + 13.1.8 + 13.1.9 + 13.1.10 + 13.1.11 + 13.1.12 + 13.1.13
    ### ****************************************************************************************************************************************
    def res32(df):
        # If all elements are null
        if pd.isnull(df['col_13.2.1']) and pd.isnull(df['col_13.2.2']) and pd.isnull(df['col_13.1.1']) and pd.isnull(df['col_13.1.2']) and pd.isnull(df['col_13.1.3']) and pd.isnull(df['col_13.1.4']) and pd.isnull(df['col_13.1.5']) and pd.isnull(df['col_13.1.6']) and pd.isnull(df['col_13.1.7']) and pd.isnull(df['col_13.1.8']) and pd.isnull(df['col_13.1.9']) and pd.isnull(df['col_13.1.10']) and pd.isnull(df['col_13.1.11']) and pd.isnull(df['col_13.1.12']) and pd.isnull(df['col_13.1.13']):
            return str(blnk  + ' ' + '13.2.1' + ' (' + str(df['col_13.2.1']) + ' ) ' + ' + ' + ' ' + '13.2.2' + ' (' + str(df['col_13.2.2']) + ' ) ' + '>=' + '13.1.1' + ' (' + str(df['col_13.1.1']) + ' ) ' + ' + ' + '13.1.2' + ' (' + str(df['col_13.1.2']) + ' ) ' + ' + ' + '13.1.3' + ' (' + str(df['col_13.1.3']) + ' ) ' + ' + ' + '13.1.4' + ' (' + str(df['col_13.1.4']) + ' ) ' + ' + ' + '13.1.5' + ' (' + str(df['col_13.1.5']) + ' ) ' + ' + ' + '13.1.6' + ' (' + str(df['col_13.1.6']) + ' ) ' + ' + ' + '13.1.7' + ' (' + str(df['col_13.1.7']) + ' ) ' + ' + ' + '13.1.8' + ' (' + str(df['col_13.1.8']) + ' ) ' + ' + ' + '13.1.9' + ' (' + str(df['col_13.1.9']) + ' ) ' + ' + ' + '13.1.10' + ' (' + str(df['col_13.1.10']) + ' ) ' + ' + ' + '13.1.11' + ' (' + str(df['col_13.1.11']) + ' ) ' + ' + ' + '13.1.12' + ' (' + str(df['col_13.1.12']) + ' ) ' + ' + ' + '13.1.13' + ' (' + str(df['col_13.1.13']) + ' ) ' )

        ### If all left elements are null
        elif (pd.isnull(df['col_13.2.1']) and pd.isnull(df['col_13.2.2'])) and (pd.notnull(df['col_13.1.1']) and pd.notnull(df['col_13.1.2']) and pd.notnull(df['col_13.1.3']) and pd.notnull(df['col_13.1.4']) and pd.notnull(df['col_13.1.5']) and pd.notnull(df['col_13.1.6']) and pd.notnull(df['col_13.1.7']) and pd.notnull(df['col_13.1.8']) and pd.isnull(df['col_13.1.9']) and pd.notnull(df['col_13.1.10']) and pd.notnull(df['col_13.1.11']) and pd.notnull(df['col_13.1.12']) and pd.notnull(df['col_13.1.13'])):
            return str(incBlnk + ' ' + '13.2.1' + ' (' + str(df['col_13.2.1']) + ' ) ' + ' + ' + ' ' + '13.2.2' + ' (' + str(df['col_13.2.2']) + ' ) ' + '>=' + '13.1.1' + ' (' + str(df['col_13.1.1']) + ' ) ' + ' + ' + '13.1.2' + ' (' + str(df['col_13.1.2']) + ' ) ' + ' + ' + '13.1.3' + ' (' + str(df['col_13.1.3']) + ' ) ' + ' + ' + '13.1.4' + ' (' + str(df['col_13.1.4']) + ' ) ' + ' + ' + '13.1.5' + ' (' + str(df['col_13.1.5']) + ' ) ' + ' + ' + '13.1.6' + ' (' + str(df['col_13.1.6']) + ' ) ' + ' + ' + '13.1.7' + ' (' + str(df['col_13.1.7']) + ' ) ' + ' + ' + '13.1.8' + ' (' + str(df['col_13.1.8']) + ' ) ' + ' + ' + '13.1.9' + ' (' + str(df['col_13.1.9']) + ' ) ' + ' + ' + '13.1.10' + ' (' + str(df['col_13.1.10']) + ' ) ' + ' + ' + '13.1.11' + ' (' + str(df['col_13.1.11']) + ' ) ' + ' + ' + '13.1.12' + ' (' + str(df['col_13.1.12']) + ' ) ' + ' + ' + '13.1.13' + ' (' + str(df['col_13.1.13']) + ' ) ' )
        
        ### If all right elements are null
        elif (pd.notnull(df['col_13.2.1']) and pd.notnull(df['col_13.1.1'])) and (pd.isnull(df['col_13.1.2']) and pd.isnull(df['col_13.1.3']) and pd.isnull(df['col_13.1.4']) and pd.isnull(df['col_13.1.5']) and pd.isnull(df['col_13.1.6']) and pd.isnull(df['col_13.1.7']) and pd.isnull(df['col_13.1.8']) and pd.isnull(df['col_13.1.9']) and pd.isnull(df['col_13.1.10']) and pd.isnull(df['col_13.1.11']) and pd.isnull(df['col_13.1.12']) and pd.isnull(df['col_13.1.13'])):
            return str(incBlnk  + ' ' + '13.2.1' + ' (' + str(df['col_13.2.1']) + ' ) ' + ' + ' + ' ' + '13.2.2' + ' (' + str(df['col_13.2.2']) + ' ) ' + '>=' + '13.1.1' + ' (' + str(df['col_13.1.1']) + ' ) ' + ' + ' + '13.1.2' + ' (' + str(df['col_13.1.2']) + ' ) ' + ' + ' + '13.1.3' + ' (' + str(df['col_13.1.3']) + ' ) ' + ' + ' + '13.1.4' + ' (' + str(df['col_13.1.4']) + ' ) ' + ' + ' + '13.1.5' + ' (' + str(df['col_13.1.5']) + ' ) ' + ' + ' + '13.1.6' + ' (' + str(df['col_13.1.6']) + ' ) ' + ' + ' + '13.1.7' + ' (' + str(df['col_13.1.7']) + ' ) ' + ' + ' + '13.1.8' + ' (' + str(df['col_13.1.8']) + ' ) ' + ' + ' + '13.1.9' + ' (' + str(df['col_13.1.9']) + ' ) ' + ' + ' + '13.1.10' + ' (' + str(df['col_13.1.10']) + ' ) ' + ' + ' + '13.1.11' + ' (' + str(df['col_13.1.11']) + ' ) ' + ' + ' + '13.1.12' + ' (' + str(df['col_13.1.12']) + ' ) ' + ' + ' + '13.1.13' + ' (' + str(df['col_13.1.13']) + ' ) ' )
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif (pd.notnull(df['col_13.2.1']) or pd.notnull(df['col_13.1.1'])) and  (pd.notnull(df['col_13.1.1']) and pd.notnull(df['col_13.1.2']) and pd.notnull(df['col_13.1.3']) and pd.notnull(df['col_13.1.4']) and pd.notnull(df['col_13.1.5']) and pd.notnull(df['col_13.1.6']) and pd.notnull(df['col_13.1.7']) and pd.notnull(df['col_13.1.8']) and pd.isnull(df['col_13.1.9']) and pd.notnull(df['col_13.1.10']) and pd.notnull(df['col_13.1.11']) and pd.notnull(df['col_13.1.12']) and pd.notnull(df['col_13.1.13'])):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif (pd.notnull(df['col_13.2.1']) and pd.notnull(df['col_13.2.2'])) and (pd.notnull(df['col_13.1.1']) and pd.notnull(df['col_13.1.2']) and pd.notnull(df['col_13.1.3']) and pd.notnull(df['col_13.1.4']) and pd.notnull(df['col_13.1.5']) and pd.notnull(df['col_13.1.6']) and pd.notnull(df['col_13.1.7']) and pd.notnull(df['col_13.1.8']) and pd.isnull(df['col_13.1.9']) and pd.notnull(df['col_13.1.10']) and pd.notnull(df['col_13.1.11']) and pd.notnull(df['col_13.1.12']) and pd.notnull(df['col_13.1.13'])):
            ### INCONSISTENT
            if df['col_13.2.1'] + df['col_13.2.2'] < df['col_13.1.1'] + df['13.1.2'] + df['13.1.3'] + df['13.1.4'] + df['13.1.5'] + df['13.1.6'] + df['13.1.7'] + df['13.1.8'] + df['13.1.9'] + df['13.1.10'] + df['13.1.11'] + df['13.1.12'] + df['13.1.13'] + df['']:
                return str( inc  + ' ' + '13.2.1' + ' (' + str(df['col_13.2.1']) + ' ) ' + ' + ' + ' ' + '13.2.2' + ' (' + str(df['col_13.2.2']) + ' ) ' + '<' + '13.1.1' + ' (' + str(df['col_13.1.1']) + ' ) ' + ' + ' + '13.1.2' + ' (' + str(df['col_13.1.2']) + ' ) ' + ' + ' + '13.1.3' + ' (' + str(df['col_13.1.3']) + ' ) ' + ' + ' + '13.1.4' + ' (' + str(df['col_13.1.4']) + ' ) ' + ' + ' + '13.1.5' + ' (' + str(df['col_13.1.5']) + ' ) ' + ' + ' + '13.1.6' + ' (' + str(df['col_13.1.6']) + ' ) ' + ' + ' + '13.1.7' + ' (' + str(df['col_13.1.7']) + ' ) ' + ' + ' + '13.1.8' + ' (' + str(df['col_13.1.8']) + ' ) ' + ' + ' + '13.1.9' + ' (' + str(df['col_13.1.9']) + ' ) ' + ' + ' + '13.1.10' + ' (' + str(df['col_13.1.10']) + ' ) ' + ' + ' + '13.1.11' + ' (' + str(df['col_13.1.11']) + ' ) ' + ' + ' + '13.1.12' + ' (' + str(df['col_13.1.12']) + ' ) ' + ' + ' + '13.1.13' + ' (' + str(df['col_13.1.13']) + ' ) ' )
        
            ### CONSISTENT
            elif df['col_13.2.1'] + df['col_13.2.2'] >= df['col_13.1.1'] + df['13.1.2'] + df['13.1.3'] + df['13.1.4'] + df['13.1.5'] + df['13.1.6'] + df['13.1.7'] + df['13.1.8'] + df['13.1.9'] + df['13.1.10'] + df['13.1.11'] + df['13.1.12'] + df['13.1.13'] + df['']:
                return con
    

    ### 13.3.1.a <= 13.2.1 + 13.2.2
    def res33(df):
        # If all elements are null
        if pd.isnull(df['col_13.3.1.a']) and pd.isnull(df['col_13.2.1']) or pd.isnull(df['col_13.2.2'])  :
            return str(blnk  + ' ' + '13.3.1.a' + ' (' + str(df['col_13.3.1.a']) + ' ) ' + '<=' + '13.2.1' + ' (' + str(df['col_13.2.1']) + ' ) ' + ' + ' + '13.2.2' + ' (' + str(df['col_13.2.2']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_13.3.1.a']) and ( pd.notnull(df['col_13.2.1']) and pd.notnull(df['col_13.2.2'])):
            return str(incBlnk  + ' ' + '13.3.1.a' + ' (' + str(df['col_13.3.1.a']) + ' ) ' + '<=' + '13.2.1' + ' (' + str(df['col_13.2.1']) + ' ) ' + ' + ' + '13.2.2' + ' (' + str(df['col_13.2.2']) + ' ) ')
        
        ### If all left elements are null
        elif pd.notnull(df['col_13.3.1.a']) and ( pd.isnull(df['col_13.2.1']) and pd.isnull(df['col_13.2.2']) ):
            return str(incBlnk  + ' ' + '13.3.1.a' + ' (' + str(df['col_13.3.1.a']) + ' ) ' + '<=' + '13.2.1' + ' (' + str(df['col_13.2.1']) + ' ) ' + ' + ' + '13.2.2' + ' (' + str(df['col_13.2.2']) + ' ) ')
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif pd.notnull(df['col_13.3.1.a']) and ( pd.notnull(df['col_13.2.1']) or pd.notnull(df['col_13.2.2']) ):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_13.3.1.a']) and pd.notnull(df['col_13.2.1']) and pd.notnull(df['col_13.2.2']):
            ### INCONSISTENT
            if df['col_13.3.1.a'] > df['col_13.2.1'] + df['col_13.2.2']:
                return str( inc  + ' ' + '13.3.1.a' + ' (' + str(df['col_13.3.1.a']) + ' ) ' + '>' + '13.2.1' + ' (' + str(df['col_13.2.1']) + ' ) ' + ' + ' + '13.2.2' + ' (' + str(df['col_13.2.2']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_13.3.1.a'] <= df['col_13.2.1'] + df['col_13.2.2']:
                return con
    


    ### 13.10.2.a <= 13.10.1.a
    def res34(df):
        # If all elements are null
        if pd.isnull(df['col_13.10.2.a']) and pd.isnull(df['col_13.10.1.a']):
            return str(blnk  + ' ' + '13.10.2.a' + ' (' + str(df['col_13.10.2.a']) + ' ) ' + '<=' + '13.10.1.a' + ' (' + str(df['col_13.10.1.a']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_13.10.2.a']) and pd.notnull(df['col_13.10.1.a']):
            return str(incBlnk  + ' ' + '13.10.2.a' + ' (' + str(df['col_13.10.2.a']) + ' ) ' + '<=' + '13.10.1.a' + ' (' + str(df['col_13.10.1.a']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_13.10.2.a']) and pd.isnull(df['col_13.10.1.a']):
            return str(incBlnk  + ' ' + '13.10.2.a' + ' (' + str(df['col_13.10.2.a']) + ' ) ' + '<=' + '13.10.1.a' + ' (' + str(df['col_13.10.1.a']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_13.10.2.a']) and pd.notnull(df['col_13.10.1.a']):
            ### INCONSISTENT
            if df['col_13.10.2.a'] > df['col_13.10.1.a']:
                return str( inc  + ' ' + '13.10.2.a' + ' (' + str(df['col_13.10.2.a']) + ' ) ' + '>' + '13.10.1.a' + ' (' + str(df['col_13.10.1.a']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_13.10.2.a'] <= df['col_13.10.1.a']:
                return con
    

    ### 13.10.2.b <= 13.10.1.b
    def res35(df):
        # If all elements are null
        if pd.isnull(df['col_13.10.2.b']) and pd.isnull(df['col_13.10.1.b']):
            return str(blnk  + ' ' + '13.10.2.b' + ' (' + str(df['col_13.10.2.b']) + ' ) ' + '<=' + '13.10.1.b' + ' (' + str(df['col_13.10.1.b']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_13.10.2.b']) and pd.notnull(df['col_13.10.1.b']):
            return str(incBlnk  + ' ' + '13.10.2.b' + ' (' + str(df['col_13.10.2.b']) + ' ) ' + '<=' + '13.10.1.b' + ' (' + str(df['col_13.10.1.b']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_13.10.2.b']) and pd.isnull(df['col_13.10.1.b']):
            return str(incBlnk  + ' ' + '13.10.2.b' + ' (' + str(df['col_13.10.2.b']) + ' ) ' + '<=' + '13.10.1.b' + ' (' + str(df['col_13.10.1.b']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_13.10.2.b']) and pd.notnull(df['col_13.10.1.b']):
            ### INCONSISTENT
            if df['col_13.10.2.b'] > df['col_13.10.1.b']:
                return str( inc  + ' ' + '13.10.2.b' + ' (' + str(df['col_13.10.2.b']) + ' ) ' + '>' + '13.10.1.b' + ' (' + str(df['col_13.10.1.b']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_13.10.2.b'] <= df['col_13.10.1.b']:
                return con
    

    ### 13.10.3.b <= 13.10.3.a
    def res36(df):
        # If all elements are null
        if pd.isnull(df['col_13.10.3.b']) and pd.isnull(df['col_13.10.3.a']):
            return str(blnk  + ' ' + '13.10.3.b' + ' (' + str(df['col_13.10.3.b']) + ' ) ' + '<=' + '13.10.3.a' + ' (' + str(df['col_13.10.3.a']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_13.10.3.b']) and pd.notnull(df['col_13.10.3.a']):
            return str(incBlnk  + ' ' + '13.10.3.b' + ' (' + str(df['col_13.10.3.b']) + ' ) ' + '<=' + '13.10.3.a' + ' (' + str(df['col_13.10.3.a']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_13.10.3.b']) and pd.isnull(df['col_13.10.3.a']):
            return str(incBlnk  + ' ' + '13.10.3.b' + ' (' + str(df['col_13.10.3.b']) + ' ) ' + '<=' + '13.10.3.a' + ' (' + str(df['col_13.10.3.a']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_13.10.3.b']) and pd.notnull(df['col_13.10.3.a']):
            ### INCONSISTENT
            if df['col_13.10.3.b'] > df['col_13.10.3.a']:
                return str( inc  + ' ' + '13.10.3.b' + ' (' + str(df['col_13.10.3.b']) + ' ) ' + '>' + '13.10.3.a' + ' (' + str(df['col_13.10.3.a']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_13.10.3.b'] <= df['col_13.10.3.a']:
                return con



    ### 14.2.1 <= 14.1.1 + 14.1.2
    def res37(df):
        # If all elements are null
        if pd.isnull(df['col_14.2.1']) and pd.isnull(df['col_14.1.1']) or pd.isnull(df['col_14.1.2'])  :
            return str(blnk  + ' ' + '14.2.1' + ' (' + str(df['col_14.2.1']) + ' ) ' + '<=' + '14.1.1' + ' (' + str(df['col_14.1.1']) + ' ) ' + ' + ' + '14.1.2' + ' (' + str(df['col_14.1.2']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_14.2.1']) and ( pd.notnull(df['col_14.1.1']) and pd.notnull(df['col_14.1.2'])):
            return str(incBlnk  + ' ' + '14.2.1' + ' (' + str(df['col_14.2.1']) + ' ) ' + '<=' + '14.1.1' + ' (' + str(df['col_14.1.1']) + ' ) ' + ' + ' + '14.1.2' + ' (' + str(df['col_14.1.2']) + ' ) ')
        
        ### If all left elements are null
        elif pd.notnull(df['col_14.2.1']) and ( pd.isnull(df['col_14.1.1']) and pd.isnull(df['col_14.1.2']) ):
            return str(incBlnk  + ' ' + '14.2.1' + ' (' + str(df['col_14.2.1']) + ' ) ' + '<=' + '14.1.1' + ' (' + str(df['col_14.1.1']) + ' ) ' + ' + ' + '14.1.2' + ' (' + str(df['col_14.1.2']) + ' ) ')
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif pd.notnull(df['col_14.2.1']) and ( pd.notnull(df['col_14.1.1']) or pd.notnull(df['col_14.1.2']) ):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_14.2.1']) and pd.notnull(df['col_14.1.1']) and pd.notnull(df['col_14.1.2']):
            ### INCONSISTENT
            if df['col_14.2.1'] > df['col_14.1.1'] + df['col_14.1.2']:
                return str( inc  + ' ' + '14.2.1' + ' (' + str(df['col_14.2.1']) + ' ) ' + '>' + '14.1.1' + ' (' + str(df['col_14.1.1']) + ' ) ' + ' + ' + '14.1.2' + ' (' + str(df['col_14.1.2']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_14.2.1'] <= df['col_14.1.1'] + df['col_14.1.1']:
                return con


    ### 14.2.2 <= 14.2.1
    def res38(df):
        # If all elements are null
        if pd.isnull(df['col_14.2.2']) and pd.isnull(df['col_14.2.1']):
            return str(blnk  + ' ' + '14.2.2' + ' (' + str(df['col_14.2.2']) + ' ) ' + '<=' + '14.2.1' + ' (' + str(df['col_14.2.1']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_14.2.2']) and pd.notnull(df['col_14.2.1']):
            return str(incBlnk  + ' ' + '14.2.2' + ' (' + str(df['col_14.2.2']) + ' ) ' + '<=' + '14.2.1' + ' (' + str(df['col_14.2.1']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_14.2.2']) and pd.isnull(df['col_14.2.1']):
            return str(incBlnk  + ' ' + '14.2.2' + ' (' + str(df['col_14.2.2']) + ' ) ' + '<=' + '14.2.1' + ' (' + str(df['col_14.2.1']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_14.2.2']) and pd.notnull(df['col_14.2.1']):
            ### INCONSISTENT
            if df['col_14.2.2'] > df['col_14.2.1']:
                return str( inc  + ' ' + '14.2.2' + ' (' + str(df['col_14.2.2']) + ' ) ' + '>' + '14.2.1' + ' (' + str(df['col_14.2.1']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_14.2.2'] <= df['col_14.2.1']:
                return con
    


    ### 14.3.1.b <= 14.3.1.a
    def res39(df):
        # If all elements are null
        if pd.isnull(df['col_14.3.1.b']) and pd.isnull(df['col_14.3.1.a']):
            return str(blnk  + ' ' + '14.3.1.b' + ' (' + str(df['col_14.3.1.b']) + ' ) ' + '<=' + '14.3.1.a' + ' (' + str(df['col_14.3.1.a']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_14.3.1.b']) and pd.notnull(df['col_14.3.1.a']):
            return str(incBlnk  + ' ' + '14.3.1.b' + ' (' + str(df['col_14.3.1.b']) + ' ) ' + '<=' + '14.3.1.a' + ' (' + str(df['col_14.3.1.a']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_14.3.1.b']) and pd.isnull(df['col_14.3.1.a']):
            return str(incBlnk  + ' ' + '14.3.1.b' + ' (' + str(df['col_14.3.1.b']) + ' ) ' + '<=' + '14.3.1.a' + ' (' + str(df['col_14.3.1.a']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_14.3.1.b']) and pd.notnull(df['col_14.3.1.a']):
            ### INCONSISTENT
            if df['col_14.3.1.b'] > df['col_14.3.1.a']:
                return str( inc  + ' ' + '14.3.1.b' + ' (' + str(df['col_14.3.1.b']) + ' ) ' + '>' + '14.3.1.a' + ' (' + str(df['col_14.3.1.a']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_14.3.1.b'] <= df['col_14.3.1.a']:
                return con



    ### 14.3.1.d <= 14.3.1.c
    def res40(df):
        # If all elements are null
        if pd.isnull(df['col_14.3.1.d']) and pd.isnull(df['col_14.3.1.c']):
            return str(blnk  + ' ' + '14.3.1.d' + ' (' + str(df['col_14.3.1.d']) + ' ) ' + '<=' + '14.3.1.c' + ' (' + str(df['col_14.3.1.c']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_14.3.1.d']) and pd.notnull(df['col_14.3.1.c']):
            return str(incBlnk  + ' ' + '14.3.1.d' + ' (' + str(df['col_14.3.1.d']) + ' ) ' + '<=' + '14.3.1.c' + ' (' + str(df['col_14.3.1.c']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_14.3.1.d']) and pd.isnull(df['col_14.3.1.c']):
            return str(incBlnk  + ' ' + '14.3.1.d' + ' (' + str(df['col_14.3.1.d']) + ' ) ' + '<=' + '14.3.1.c' + ' (' + str(df['col_14.3.1.c']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_14.3.1.d']) and pd.notnull(df['col_14.3.1.c']):
            ### INCONSISTENT
            if df['col_14.3.1.d'] > df['col_14.3.1.c']:
                return str( inc  + ' ' + '14.3.1.d' + ' (' + str(df['col_14.3.1.d']) + ' ) ' + '>' + '14.3.1.c' + ' (' + str(df['col_14.3.1.c']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_14.3.1.d'] <= df['col_14.3.1.c']:
                return con


    ### 14.3.2.b <= 14.3.2.a
    def res41(df):
        # If all elements are null
        if pd.isnull(df['col_14.3.2.b']) and pd.isnull(df['col_14.3.2.a']):
            return str(blnk  + ' ' + '14.3.2.b' + ' (' + str(df['col_14.3.2.b']) + ' ) ' + '<=' + '14.3.2.a' + ' (' + str(df['col_14.3.2.a']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_14.3.2.b']) and pd.notnull(df['col_14.3.2.a']):
            return str(incBlnk  + ' ' + '14.3.2.b' + ' (' + str(df['col_14.3.2.b']) + ' ) ' + '<=' + '14.3.2.a' + ' (' + str(df['col_14.3.2.a']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_14.3.2.b']) and pd.isnull(df['col_14.3.2.a']):
            return str(incBlnk  + ' ' + '14.3.2.b' + ' (' + str(df['col_14.3.2.b']) + ' ) ' + '<=' + '14.3.2.a' + ' (' + str(df['col_14.3.2.a']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_14.3.2.b']) and pd.notnull(df['col_14.3.2.a']):
            ### INCONSISTENT
            if df['col_14.3.2.b'] > df['col_14.3.2.a']:
                return str( inc  + ' ' + '14.3.2.b' + ' (' + str(df['col_14.3.2.b']) + ' ) ' + '>' + '14.3.2.a' + ' (' + str(df['col_14.3.2.a']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_14.3.2.b'] <= df['col_14.3.2.a']:
                return con
    

    ### 14.3.2.d <= 14.3.2.c
    def res42(df):
        # If all elements are null
        if pd.isnull(df['col_14.3.2.d']) and pd.isnull(df['col_14.3.2.c']):
            return str(blnk  + ' ' + '14.3.2.d' + ' (' + str(df['col_14.3.2.d']) + ' ) ' + '<=' + '14.3.2.c' + ' (' + str(df['col_14.3.2.c']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_14.3.2.d']) and pd.notnull(df['col_14.3.2.c']):
            return str(incBlnk  + ' ' + '14.3.2.d' + ' (' + str(df['col_14.3.2.d']) + ' ) ' + '<=' + '14.3.2.c' + ' (' + str(df['col_14.3.2.c']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_14.3.2.d']) and pd.isnull(df['col_14.3.2.c']):
            return str(incBlnk  + ' ' + '14.3.2.d' + ' (' + str(df['col_14.3.2.d']) + ' ) ' + '<=' + '14.3.2.c' + ' (' + str(df['col_14.3.2.c']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_14.3.2.d']) and pd.notnull(df['col_14.3.2.c']):
            ### INCONSISTENT
            if df['col_14.3.2.d'] > df['col_14.3.2.c']:
                return str( inc  + ' ' + '14.3.2.d' + ' (' + str(df['col_14.3.2.d']) + ' ) ' + '>' + '14.3.2.c' + ' (' + str(df['col_14.3.2.c']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_14.3.2.d'] <= df['col_14.3.2.c']:
                return con


    ### 14.3.3.b <= 14.3.3.a
    def res43(df):
        # If all elements are null
        if pd.isnull(df['col_14.3.3.b']) and pd.isnull(df['col_14.3.3.a']):
            return str(blnk  + ' ' + '14.3.3.b' + ' (' + str(df['col_14.3.3.b']) + ' ) ' + '<=' + '14.3.3.a' + ' (' + str(df['col_14.3.3.a']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_14.3.3.b']) and pd.notnull(df['col_14.3.3.a']):
            return str(incBlnk  + ' ' + '14.3.3.b' + ' (' + str(df['col_14.3.3.b']) + ' ) ' + '<=' + '14.3.3.a' + ' (' + str(df['col_14.3.3.a']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_14.3.3.b']) and pd.isnull(df['col_14.3.3.a']):
            return str(incBlnk  + ' ' + '14.3.3.b' + ' (' + str(df['col_14.3.3.b']) + ' ) ' + '<=' + '14.3.3.a' + ' (' + str(df['col_14.3.3.a']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_14.3.3.b']) and pd.notnull(df['col_14.3.3.a']):
            ### INCONSISTENT
            if df['col_14.3.3.b'] > df['col_14.3.3.a']:
                return str( inc  + ' ' + '14.3.3.b' + ' (' + str(df['col_14.3.3.b']) + ' ) ' + '>' + '14.3.3.a' + ' (' + str(df['col_14.3.3.a']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_14.3.3.b'] <= df['col_14.3.3.a']:
                return con



    ### 14.3.3.d <= 14.3.3.c
    def res44(df):
        # If all elements are null
        if pd.isnull(df['col_14.3.3.d']) and pd.isnull(df['col_14.3.3.c']):
            return str(blnk  + ' ' + '14.3.3.d' + ' (' + str(df['col_14.3.3.d']) + ' ) ' + '<=' + '14.3.3.c' + ' (' + str(df['col_14.3.3.c']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_14.3.3.d']) and pd.notnull(df['col_14.3.3.c']):
            return str(incBlnk  + ' ' + '14.3.3.d' + ' (' + str(df['col_14.3.3.d']) + ' ) ' + '<=' + '14.3.3.c' + ' (' + str(df['col_14.3.3.c']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_14.3.3.d']) and pd.isnull(df['col_14.3.3.c']):
            return str(incBlnk  + ' ' + '14.3.3.d' + ' (' + str(df['col_14.3.3.d']) + ' ) ' + '<=' + '14.3.3.c' + ' (' + str(df['col_14.3.3.c']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_14.3.3.d']) and pd.notnull(df['col_14.3.3.c']):
            ### INCONSISTENT
            if df['col_14.3.3.d'] > df['col_14.3.3.c']:
                return str( inc  + ' ' + '14.3.3.d' + ' (' + str(df['col_14.3.3.d']) + ' ) ' + '>' + '14.3.3.c' + ' (' + str(df['col_14.3.3.c']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_14.3.3.d'] <= df['col_14.3.3.c']:
                return con
    


    ### 14.3.4.b <= 14.3.4.a
    def res45(df):
        # If all elements are null
        if pd.isnull(df['col_14.3.4.b']) and pd.isnull(df['col_14.3.4.a']):
            return str(blnk  + ' ' + '14.3.4.b' + ' (' + str(df['col_14.3.4.b']) + ' ) ' + '<=' + '14.3.4.a' + ' (' + str(df['col_14.3.4.a']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_14.3.4.b']) and pd.notnull(df['col_14.3.4.a']):
            return str(incBlnk  + ' ' + '14.3.4.b' + ' (' + str(df['col_14.3.4.b']) + ' ) ' + '<=' + '14.3.4.a' + ' (' + str(df['col_14.3.4.a']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_14.3.4.b']) and pd.isnull(df['col_14.3.4.a']):
            return str(incBlnk  + ' ' + '14.3.4.b' + ' (' + str(df['col_14.3.4.b']) + ' ) ' + '<=' + '14.3.4.a' + ' (' + str(df['col_14.3.4.a']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_14.3.4.b']) and pd.notnull(df['col_14.3.4.a']):
            ### INCONSISTENT
            if df['col_14.3.4.b'] > df['col_14.3.4.a']:
                return str( inc  + ' ' + '14.3.4.b' + ' (' + str(df['col_14.3.4.b']) + ' ) ' + '>' + '14.3.4.a' + ' (' + str(df['col_14.3.4.a']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_14.3.4.b'] <= df['col_14.3.4.a']:
                return con   
    

    ### 14.3.4.d <= 14.3.4.c
    def res46(df):
        # If all elements are null
        if pd.isnull(df['col_14.3.4.d']) and pd.isnull(df['col_14.3.4.c']):
            return str(blnk  + ' ' + '14.3.4.d' + ' (' + str(df['col_14.3.4.d']) + ' ) ' + '<=' + '14.3.4.c' + ' (' + str(df['col_14.3.4.c']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_14.3.4.d']) and pd.notnull(df['col_14.3.4.c']):
            return str(incBlnk  + ' ' + '14.3.4.d' + ' (' + str(df['col_14.3.4.d']) + ' ) ' + '<=' + '14.3.4.c' + ' (' + str(df['col_14.3.4.c']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_14.3.4.d']) and pd.isnull(df['col_14.3.4.c']):
            return str(incBlnk  + ' ' + '14.3.4.d' + ' (' + str(df['col_14.3.4.d']) + ' ) ' + '<=' + '14.3.4.c' + ' (' + str(df['col_14.3.4.c']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_14.3.4.d']) and pd.notnull(df['col_14.3.4.c']):
            ### INCONSISTENT
            if df['col_14.3.4.d'] > df['col_14.3.4.c']:
                return str( inc  + ' ' + '14.3.4.d' + ' (' + str(df['col_14.3.4.d']) + ' ) ' + '>' + '14.3.4.c' + ' (' + str(df['col_14.3.4.c']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_14.3.4.d'] <= df['col_14.3.4.c']:
                return con 
    

    ### 14.4.1.b <= 14.4.1.a
    def res47(df):
        # If all elements are null
        if pd.isnull(df['col_14.4.1.b']) and pd.isnull(df['col_14.4.1.a']):
            return str(blnk  + ' ' + '14.4.1.b' + ' (' + str(df['col_14.4.1.b']) + ' ) ' + '<=' + '14.4.1.a' + ' (' + str(df['col_14.4.1.a']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_14.4.1.b']) and pd.notnull(df['col_14.4.1.a']):
            return str(incBlnk  + ' ' + '14.4.1.b' + ' (' + str(df['col_14.4.1.b']) + ' ) ' + '<=' + '14.4.1.a' + ' (' + str(df['col_14.4.1.a']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_14.4.1.b']) and pd.isnull(df['col_14.4.1.a']):
            return str(incBlnk  + ' ' + '14.4.1.b' + ' (' + str(df['col_14.4.1.b']) + ' ) ' + '<=' + '14.4.1.a' + ' (' + str(df['col_14.4.1.a']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_14.4.1.b']) and pd.notnull(df['col_14.4.1.a']):
            ### INCONSISTENT
            if df['col_14.4.1.b'] > df['col_14.4.1.a']:
                return str( inc  + ' ' + '14.4.1.b' + ' (' + str(df['col_14.4.1.b']) + ' ) ' + '>' + '14.4.1.a' + ' (' + str(df['col_14.4.1.a']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_14.4.1.b'] <= df['col_14.4.1.a']:
                return con
    

    ### 14.4.2.b <= 14.4.2.a
    def res48(df):
        # If all elements are null
        if pd.isnull(df['col_14.4.2.b']) and pd.isnull(df['col_14.4.2.a']):
            return str(blnk  + ' ' + '14.4.2.b' + ' (' + str(df['col_14.4.2.b']) + ' ) ' + '<=' + '14.4.2.a' + ' (' + str(df['col_14.4.2.a']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_14.4.2.b']) and pd.notnull(df['col_14.4.2.a']):
            return str(incBlnk  + ' ' + '14.4.2.b' + ' (' + str(df['col_14.4.2.b']) + ' ) ' + '<=' + '14.4.2.a' + ' (' + str(df['col_14.4.2.a']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_14.4.2.b']) and pd.isnull(df['col_14.4.2.a']):
            return str(incBlnk  + ' ' + '14.4.2.b' + ' (' + str(df['col_14.4.2.b']) + ' ) ' + '<=' + '14.4.2.a' + ' (' + str(df['col_14.4.2.a']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_14.4.2.b']) and pd.notnull(df['col_14.4.2.a']):
            ### INCONSISTENT
            if df['col_14.4.2.b'] > df['col_14.4.2.a']:
                return str( inc  + ' ' + '14.4.2.b' + ' (' + str(df['col_14.4.2.b']) + ' ) ' + '>' + '14.4.2.a' + ' (' + str(df['col_14.4.2.a']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_14.4.2.b'] <= df['col_14.4.2.a']:
                return con
    


    ### 14.4.3.b <= 14.4.3.a
    def res49(df):
        # If all elements are null
        if pd.isnull(df['col_14.4.3.b']) and pd.isnull(df['col_14.4.3.a']):
            return str(blnk  + ' ' + '14.4.3.b' + ' (' + str(df['col_14.4.3.b']) + ' ) ' + '<=' + '14.4.3.a' + ' (' + str(df['col_14.4.3.a']) + ' ) ')

        ### If all left elements are null
        elif pd.isnull(df['col_14.4.3.b']) and pd.notnull(df['col_14.4.3.a']):
            return str(incBlnk  + ' ' + '14.4.3.b' + ' (' + str(df['col_14.4.3.b']) + ' ) ' + '<=' + '14.4.3.a' + ' (' + str(df['col_14.4.3.a']) + ' ) ')
        
        ### If all right elements are null
        elif pd.notnull(df['col_14.4.3.b']) and pd.isnull(df['col_14.4.3.a']):
            return str(incBlnk  + ' ' + '14.4.3.b' + ' (' + str(df['col_14.4.3.b']) + ' ) ' + '<=' + '14.4.3.a' + ' (' + str(df['col_14.4.3.a']) + ' ) ')
        
        ### INCONSISTENT or CONSISTENT
        elif pd.notnull(df['col_14.4.3.b']) and pd.notnull(df['col_14.4.3.a']):
            ### INCONSISTENT
            if df['col_14.4.3.b'] > df['col_14.4.3.a']:
                return str( inc  + ' ' + '14.4.3.b' + ' (' + str(df['col_14.4.3.b']) + ' ) ' + '>' + '14.4.3.a' + ' (' + str(df['col_14.4.3.a']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_14.4.3.b'] <= df['col_14.4.3.a']:
                return con
    

    ### 15.1.1.a + 15.1.1.b + 15.1.2.a + 15.1.2.b + 15.1.3.a + 15.1.3.b == 15.2.1 + 15.2.2 + 15.2.3 + 15.2.4
    def res50(df):
        # If all elements are null
        if pd.isnull(df['col_15.1.1.a']) and pd.isnull(df['col_15.1.1.b']) and pd.isnull(df['col_15.1.2.a']) and pd.isnull(df['col_15.1.2.b']) and pd.isnull(df['col_15.1.3.a']) and pd.isnull(df['col_15.1.3.b']) and pd.isnull(df['col_15.2.1']) and pd.isnull(df['col_15.2.2']) and pd.isnull(df['col_15.2.3']) and pd.isnull(df['col_15.2.4']):
            return str(blnk  + ' ' + '15.1.1.a' + ' (' + str(df['col_15.1.1.a']) + ' ) ' + ' + ' +  '15.1.1.b' + ' (' + str(df['col_15.1.1.b']) + ' ) ' + ' + ' +  '15.1.2.a' + ' (' + str(df['col_15.1.2.a']) + ' ) ' + ' + ' +  '15.1.2.b' + ' (' + str(df['col_15.1.2.b']) + ' ) ' + ' + ' +  '15.1.3.a' + ' (' + str(df['col_15.1.3.b']) + ' ) ' + '=='  +  '15.2.1' + ' (' + str(df['col_15.2.1']) + ' ) ' + ' + ' +  '15.2.2' + ' (' + str(df['col_15.2.2']) + ' ) ' + ' + ' +  '15.2.3' + ' (' + str(df['col_15.2.3']) + ' ) ' + ' + ' +  '15.2.4' + ' (' + str(df['col_15.2.4']) + ' ) ')

        ### If all left elements are null
        elif (pd.isnull(df['col_15.1.1.a']) and pd.isnull(df['col_15.1.1.b']) and pd.isnull(df['col_15.1.2.a']) and pd.isnull(df['col_15.1.2.b']) and pd.isnull(df['col_15.1.3.a']) and pd.isnull(df['col_15.1.3.b'])) and (pd.notnull(df['col_15.2.1']) and pd.notnull(df['col_15.2.2']) and pd.notnull(df['col_15.2.3']) and pd.notnull(df['col_15.2.4'])):
            return str(incBlnk  + ' ' + '15.1.1.a' + ' (' + str(df['col_15.1.1.a']) + ' ) ' + ' + ' +  '15.1.1.b' + ' (' + str(df['col_15.1.1.b']) + ' ) ' + ' + ' +  '15.1.2.a' + ' (' + str(df['col_15.1.2.a']) + ' ) ' + ' + ' +  '15.1.2.b' + ' (' + str(df['col_15.1.2.b']) + ' ) ' + ' + ' +  '15.1.3.a' + ' (' + str(df['col_15.1.3.b']) + ' ) ' + '=='  +  '15.2.1' + ' (' + str(df['col_15.2.1']) + ' ) ' + ' + ' +  '15.2.2' + ' (' + str(df['col_15.2.2']) + ' ) ' + ' + ' +  '15.2.3' + ' (' + str(df['col_15.2.3']) + ' ) ' + ' + ' +  '15.2.4' + ' (' + str(df['col_15.2.4']) + ' ) ')
        
        ### If all right elements are null
        elif (pd.notnull(df['col_15.1.1.a']) and pd.notnull(df['col_15.1.1.b']) and pd.notnull(df['col_15.1.2.a']) and pd.notnull(df['col_15.1.2.b']) and pd.notnull(df['col_15.1.3.a']) and pd.notnull(df['col_15.1.3.b'])) and (pd.isnull(df['col_15.2.1']) and pd.isnull(df['col_15.2.2']) and pd.isnull(df['col_15.2.3']) and pd.isnull(df['col_15.2.4'])):
            return str(incBlnk  + ' ' + '15.1.1.a' + ' (' + str(df['col_15.1.1.a']) + ' ) ' + ' + ' +  '15.1.1.b' + ' (' + str(df['col_15.1.1.b']) + ' ) ' + ' + ' +  '15.1.2.a' + ' (' + str(df['col_15.1.2.a']) + ' ) ' + ' + ' +  '15.1.2.b' + ' (' + str(df['col_15.1.2.b']) + ' ) ' + ' + ' +  '15.1.3.a' + ' (' + str(df['col_15.1.3.b']) + ' ) ' + '=='  +  '15.2.1' + ' (' + str(df['col_15.2.1']) + ' ) ' + ' + ' +  '15.2.2' + ' (' + str(df['col_15.2.2']) + ' ) ' + ' + ' +  '15.2.3' + ' (' + str(df['col_15.2.3']) + ' ) ' + ' + ' +  '15.2.4' + ' (' + str(df['col_15.2.4']) + ' ) ')
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif (pd.notnull(df['col_15.1.1.a']) or pd.notnull(df['col_15.1.1.b']) or pd.notnull(df['col_15.1.2.a']) or pd.notnull(df['col_15.1.2.b']) or pd.notnull(df['col_15.1.3.a']) or pd.notnull(df['col_15.1.3.b'])) and (pd.notnull(df['col_15.2.1']) or pd.notnull(df['col_15.2.2']) or pd.notnull(df['col_15.2.3']) or pd.notnull(df['col_15.2.4'])):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif (pd.notnull(df['col_15.1.1.a']) and pd.notnull(df['col_15.1.1.b']) and pd.notnull(df['col_15.1.2.a']) and pd.notnull(df['col_15.1.2.b']) and pd.notnull(df['col_15.1.3.a']) and pd.notnull(df['col_15.1.3.b'])) and (pd.notnull(df['col_15.2.1']) and pd.notnull(df['col_15.2.2']) and pd.notnull(df['col_15.2.3']) and pd.notnull(df['col_15.2.4'])):
            ### INCONSISTENT
            if df['col_15.1.1.a'] + df['col_15.1.1.b'] + df['col_15.1.2.a'] + df['col_15.1.2.b'] + df['col_15.1.3.a'] + df['col_15.1.3.b'] != df['col_15.2.1'] + df['col_15.2.2'] + df['col_15.2.3'] + df['col_15.2.4'] :
                return str( inc  + ' ' + '15.1.1.a' + ' (' + str(df['col_15.1.1.a']) + ' ) ' + ' + ' +  '15.1.1.b' + ' (' + str(df['col_15.1.1.b']) + ' ) ' + ' + ' +  '15.1.2.a' + ' (' + str(df['col_15.1.2.a']) + ' ) ' + ' + ' +  '15.1.2.b' + ' (' + str(df['col_15.1.2.b']) + ' ) ' + ' + ' +  '15.1.3.a' + ' (' + str(df['col_15.1.3.b']) + ' ) ' + '!='  +  '15.2.1' + ' (' + str(df['col_15.2.1']) + ' ) ' + ' + ' +  '15.2.2' + ' (' + str(df['col_15.2.2']) + ' ) ' + ' + ' +  '15.2.3' + ' (' + str(df['col_15.2.3']) + ' ) ' + ' + ' +  '15.2.4' + ' (' + str(df['col_15.2.4']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_15.1.1.a'] + df['col_15.1.1.b'] + df['col_15.1.2.a'] + df['col_15.1.2.b'] + df['col_15.1.3.a'] + df['col_15.1.3.b'] == df['col_15.2.1'] + df['col_15.2.2'] + df['col_15.2.3'] + df['col_15.2.4'] :
                return con



    ### 15.1.4.a + 15.1.4.b == 15.3.1 + 15.3.2 + 15.3.3 + 15.3.4 + 15.3.5 
    def res51(df):
        # If all elements are null
        if pd.isnull(df['col_15.1.4.a']) and pd.isnull(df['col_15.1.4.b']) and pd.isnull(df['col_15.3.1']) and pd.isnull(df['col_15.3.2']) and pd.isnull(df['col_15.3.3']) and pd.isnull(df['col_15.3.4']) and pd.isnull(df['col_15.3.5']) :
            return str(blnk  + ' ' + '15.1.4.a' + ' (' + str(df['col_15.1.4.a']) + ' ) ' + ' + ' +  '15.1.4.b' + ' (' + str(df['col_15.1.4.b']) + ' ) ' + ' == ' +  '15.3.1' + ' (' + str(df['col_15.3.1']) + ' ) ' + ' + ' +  '15.3.2' + ' (' + str(df['col_15.3.2']) + ' ) ' + ' + ' +  '15.3.3' + ' (' + str(df['col_15.3.3']) + ' ) ' + ' + ' +  '15.3.4' + ' (' + str(df['col_15.3.4']) + ' ) ' + ' + ' +  '15.3.5' + ' (' + str(df['col_15.3.5']) + ' ) ')

        ### If all left elements are null
        elif (pd.isnull(df['col_15.1.4.a']) and pd.isnull(df['col_15.1.4.b'])) and (pd.notnull(df['col_15.3.1']) and pd.notnull(df['col_15.3.2']) and pd.notnull(df['col_15.3.3']) and pd.notnull(df['col_15.3.4']) and pd.notnull(df['col_15.3.5'])):
            return str(incBlnk  + ' ' + '15.1.4.a' + ' (' + str(df['col_15.1.4.a']) + ' ) ' + ' + ' +  '15.1.4.b' + ' (' + str(df['col_15.1.4.b']) + ' ) ' + ' == ' +  '15.3.1' + ' (' + str(df['col_15.3.1']) + ' ) ' + ' + ' +  '15.3.2' + ' (' + str(df['col_15.3.2']) + ' ) ' + ' + ' +  '15.3.3' + ' (' + str(df['col_15.3.3']) + ' ) ' + ' + ' +  '15.3.4' + ' (' + str(df['col_15.3.4']) + ' ) ' + ' + ' +  '15.3.5' + ' (' + str(df['col_15.3.5']) + ' ) ')
        
        ### If all right elements are null
        elif (pd.notnull(df['col_15.1.4.a']) and pd.notnull(df['col_15.1.4.b'])) and (pd.isnull(df['col_15.3.1']) and pd.isnull(df['col_15.3.2']) and pd.isnull(df['col_15.3.3']) and pd.isnull(df['col_15.3.4']) and pd.isnull(df['col_15.3.5'])):
            return str(incBlnk  + ' ' + '15.1.4.a' + ' (' + str(df['col_15.1.4.a']) + ' ) ' + ' + ' +  '15.1.4.b' + ' (' + str(df['col_15.1.4.b']) + ' ) ' + ' == ' +  '15.3.1' + ' (' + str(df['col_15.3.1']) + ' ) ' + ' + ' +  '15.3.2' + ' (' + str(df['col_15.3.2']) + ' ) ' + ' + ' +  '15.3.3' + ' (' + str(df['col_15.3.3']) + ' ) ' + ' + ' +  '15.3.4' + ' (' + str(df['col_15.3.4']) + ' ) ' + ' + ' +  '15.3.5' + ' (' + str(df['col_15.3.5']) + ' ) ')
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif (pd.notnull(df['col_15.1.4.a']) or pd.notnull(df['col_15.1.4.b'])) and (pd.notnull(df['col_15.3.1']) or pd.notnull(df['col_15.3.2']) or pd.notnull(df['col_15.3.3']) or pd.notnull(df['col_15.3.4']) or pd.notnull(df['col_15.3.5'])):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif (pd.notnull(df['col_15.1.4.a']) and pd.notnull(df['col_15.1.4.b'])) and (pd.notnull(df['col_15.3.1']) and pd.notnull(df['col_15.3.2']) and pd.notnull(df['col_15.3.3']) and pd.notnull(df['col_15.3.4']) and pd.notnull(df['col_15.3.5'])):
            ### INCONSISTENT
            if df['col_15.1.4.a'] + df['col_15.1.4.b'] != df['col_15.3.1'] + df['col_15.3.2'] + df['col_15.3.3'] + df['col_15.3.4'] != df['col_15.3.5'] :
                return str( inc  + ' ' + '15.1.4.a' + ' (' + str(df['col_15.1.4.a']) + ' ) ' + ' + ' +  '15.1.4.b' + ' (' + str(df['col_15.1.4.b']) + ' ) ' + ' != ' +  '15.3.1' + ' (' + str(df['col_15.3.1']) + ' ) ' + ' + ' +  '15.3.2' + ' (' + str(df['col_15.3.2']) + ' ) ' + ' + ' +  '15.3.3' + ' (' + str(df['col_15.3.3']) + ' ) ' + ' + ' +  '15.3.4' + ' (' + str(df['col_15.3.4']) + ' ) ' + ' + ' +  '15.3.5' + ' (' + str(df['col_15.3.5']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_15.1.4.a'] + df['col_15.1.4.b'] == df['col_15.3.1'] + df['col_15.3.2'] + df['col_15.3.3'] + df['col_15.3.4'] != df['col_15.3.5'] :
                return con


    ### 15.5.1 + 15.5.2 + 15.5.3 + 15.5.4 + 15.5.5 + 15.5.6 + 15.5.7 == 15.5.8 
    def res52(df):
        # If all elements are null
        if pd.isnull(df['col_15.5.1']) and pd.isnull(df['col_15.5.2']) and pd.isnull(df['col_15.5.3']) and pd.isnull(df['col_15.5.4']) and pd.isnull(df['col_15.5.5']) and pd.isnull(df['col_15.5.6']) and pd.isnull(df['col_15.5.7']) and pd.isnull(df['col_15.5.8']):
            return str(blnk  + ' ' + '15.5.1' + ' (' + str(df['col_15.5.1']) + ' ) ' + ' + ' +  '15.5.2' + ' (' + str(df['col_15.5.2']) + ' ) ' + ' + ' +  '15.5.3' + ' (' + str(df['col_15.5.3']) + ' ) ' + ' + ' +  '15.5.4' + ' (' + str(df['col_15.5.4']) + ' ) ' + ' + ' +  '15.5.5' + ' (' + str(df['col_15.5.5']) + ' ) ' + ' + ' +  '15.5.6' + ' (' + str(df['col_15.5.6']) + ' ) ' + ' + ' +  '15.5.7' + ' (' + str(df['col_15.5.7']) + ' ) ' + '==' +  '15.5.8' + ' (' + str(df['col_15.5.8']) + ' ) ')

        ### If all left elements are null
        elif (pd.isnull(df['col_15.5.1']) and pd.isnull(df['col_15.5.2']) and pd.isnull(df['col_15.5.3']) and pd.isnull(df['col_15.5.4']) and pd.isnull(df['col_15.5.5']) and pd.isnull(df['col_15.5.6']) and pd.isnull(df['col_15.5.7'])) and (pd.notnull(df['col_15.5.8'])):
            return str(incBlnk  + ' ' + '15.5.1' + ' (' + str(df['col_15.5.1']) + ' ) ' + ' + ' +  '15.5.2' + ' (' + str(df['col_15.5.2']) + ' ) ' + ' + ' +  '15.5.3' + ' (' + str(df['col_15.5.3']) + ' ) ' + ' + ' +  '15.5.4' + ' (' + str(df['col_15.5.4']) + ' ) ' + ' + ' +  '15.5.5' + ' (' + str(df['col_15.5.5']) + ' ) ' + ' + ' +  '15.5.6' + ' (' + str(df['col_15.5.6']) + ' ) ' + ' + ' +  '15.5.7' + ' (' + str(df['col_15.5.7']) + ' ) ' + '==' +  '15.5.8' + ' (' + str(df['col_15.5.8']) + ' ) ')
        
        ### If all right elements are null
        elif (pd.notnull(df['col_15.5.1']) and pd.notnull(df['col_15.5.2']) and pd.notnull(df['col_15.5.3']) and pd.notnull(df['col_15.5.4']) and pd.notnull(df['col_15.5.5']) and pd.notnull(df['col_15.5.6']) and pd.notnull(df['col_15.5.7'])) and (pd.isnull(df['col_15.5.8'])):
            return str(incBlnk  + ' ' + '15.5.1' + ' (' + str(df['col_15.5.1']) + ' ) ' + ' + ' +  '15.5.2' + ' (' + str(df['col_15.5.2']) + ' ) ' + ' + ' +  '15.5.3' + ' (' + str(df['col_15.5.3']) + ' ) ' + ' + ' +  '15.5.4' + ' (' + str(df['col_15.5.4']) + ' ) ' + ' + ' +  '15.5.5' + ' (' + str(df['col_15.5.5']) + ' ) ' + ' + ' +  '15.5.6' + ' (' + str(df['col_15.5.6']) + ' ) ' + ' + ' +  '15.5.7' + ' (' + str(df['col_15.5.7']) + ' ) ' + '==' +  '15.5.8' + ' (' + str(df['col_15.5.8']) + ' ) ')
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif (pd.notnull(df['col_15.5.1']) or pd.notnull(df['col_15.5.2']) or pd.notnull(df['col_15.5.3']) or pd.notnull(df['col_15.5.4']) or pd.notnull(df['col_15.5.5']) or pd.notnull(df['col_15.5.6']) or pd.notnull(df['col_15.5.7'])) and (pd.notnull(df['col_15.5.8'])):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif (pd.notnull(df['col_15.5.1']) and pd.notnull(df['col_15.5.2']) and pd.notnull(df['col_15.5.3']) and pd.notnull(df['col_15.5.4']) and pd.notnull(df['col_15.5.5']) and pd.notnull(df['col_15.5.6']) and pd.notnull(df['col_15.5.7'])) and (pd.notnull(df['col_15.5.8'])):
            ### INCONSISTENT
            if df['col_15.5.1'] + df['col_15.5.2'] + df['col_15.5.3'] + df['col_15.5.4'] + df['col_15.5.5'] + df['col_15.5.6'] + df['col_15.5.7'] != df['col_15.5.7'] :
                return str( inc  + ' ' + '15.5.1' + ' (' + str(df['col_15.5.1']) + ' ) ' + ' + ' +  '15.5.2' + ' (' + str(df['col_15.5.2']) + ' ) ' + ' + ' +  '15.5.3' + ' (' + str(df['col_15.5.3']) + ' ) ' + ' + ' +  '15.5.4' + ' (' + str(df['col_15.5.4']) + ' ) ' + ' + ' +  '15.5.5' + ' (' + str(df['col_15.5.5']) + ' ) ' + ' + ' +  '15.5.6' + ' (' + str(df['col_15.5.6']) + ' ) ' + ' + ' +  '15.5.7' + ' (' + str(df['col_15.5.7']) + ' ) ' + '!=' +  '15.5.8' + ' (' + str(df['col_15.5.8']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_15.5.1'] + df['col_15.5.2'] + df['col_15.5.3'] + df['col_15.5.4'] + df['col_15.5.5'] + df['col_15.5.6'] + df['col_15.5.7'] == df['col_15.5.7'] :
                return con
    


    ### 15.5.1 + 15.5.2 + 15.5.3 + 15.5.4 + 15.5.5 + 15.5.6 + 15.5.7 == 15.5.8.a + 15.5.8.b + 15.5.8.c + 15.5.8.d
    def res53(df):
        # If all elements are null
        if pd.isnull(df['col_15.5.1']) and pd.isnull(df['col_15.5.2']) and pd.isnull(df['col_15.5.3']) and pd.isnull(df['col_15.5.4']) and pd.isnull(df['col_15.5.5']) and pd.isnull(df['col_15.5.6']) and pd.isnull(df['col_15.5.7']) and pd.isnull(df['col_15.5.8.a']) and pd.isnull(df['col_15.5.8.b']) and pd.isnull(df['col_15.5.8.c']) and pd.isnull(df['col_15.5.8.d']):
            return str(blnk  + ' ' + '15.5.1' + ' (' + str(df['col_15.5.1']) + ' ) ' + ' + ' +  '15.5.2' + ' (' + str(df['col_15.5.2']) + ' ) ' + ' + ' +  '15.5.3' + ' (' + str(df['col_15.5.3']) + ' ) ' + ' + ' +  '15.5.4' + ' (' + str(df['col_15.5.4']) + ' ) ' + ' + ' +  '15.5.5' + ' (' + str(df['col_15.5.5']) + ' ) ' + ' + ' +  '15.5.6' + ' (' + str(df['col_15.5.6']) + ' ) ' + ' + ' +  '15.5.7' + ' (' + str(df['col_15.5.7']) + ' ) ' + '==' +  '15.5.8.a' + ' (' + str(df['col_15.5.8.a']) + ' ) ' + ' + ' +  '15.5.8.b' + ' (' + str(df['col_15.5.8.b']) + ' ) ' + ' + ' +  '15.5.8.c' + ' (' + str(df['col_15.5.8.c']) + ' ) ' + ' + ' +  '15.5.8.d' + ' (' + str(df['col_15.5.8.d']) + ' ) ')

        ### If all left elements are null
        elif (pd.isnull(df['col_15.5.1']) and pd.isnull(df['col_15.5.2']) and pd.isnull(df['col_15.5.3']) and pd.isnull(df['col_15.5.4']) and pd.isnull(df['col_15.5.5']) and pd.isnull(df['col_15.5.6']) and pd.isnull(df['col_15.5.7'])) and (pd.notnull(df['col_15.5.8.a']) and pd.notnull(df['col_15.5.8.b']) and pd.notnull(df['col_15.5.8.c']) and pd.notnull(df['col_15.5.8.d'])):
            return str(incBlnk  + ' ' + '15.5.1' + ' (' + str(df['col_15.5.1']) + ' ) ' + ' + ' +  '15.5.2' + ' (' + str(df['col_15.5.2']) + ' ) ' + ' + ' +  '15.5.3' + ' (' + str(df['col_15.5.3']) + ' ) ' + ' + ' +  '15.5.4' + ' (' + str(df['col_15.5.4']) + ' ) ' + ' + ' +  '15.5.5' + ' (' + str(df['col_15.5.5']) + ' ) ' + ' + ' +  '15.5.6' + ' (' + str(df['col_15.5.6']) + ' ) ' + ' + ' +  '15.5.7' + ' (' + str(df['col_15.5.7']) + ' ) ' + '==' +  '15.5.8.a' + ' (' + str(df['col_15.5.8.a']) + ' ) ' + ' + ' +  '15.5.8.b' + ' (' + str(df['col_15.5.8.b']) + ' ) ' + ' + ' +  '15.5.8.c' + ' (' + str(df['col_15.5.8.c']) + ' ) ' + ' + ' +  '15.5.8.d' + ' (' + str(df['col_15.5.8.d']) + ' ) ')
        
        ### If all right elements are null
        elif (pd.notnull(df['col_15.5.1']) and pd.notnull(df['col_15.5.2']) and pd.notnull(df['col_15.5.3']) and pd.notnull(df['col_15.5.4']) and pd.notnull(df['col_15.5.5']) and pd.notnull(df['col_15.5.6']) and pd.notnull(df['col_15.5.7'])) and (pd.isnull(df['col_15.5.8.a']) and pd.isnull(df['col_15.5.8.b']) and pd.isnull(df['col_15.5.8.c']) and pd.isnull(df['col_15.5.8.d'])):
            return str(incBlnk  + ' ' + '15.5.1' + ' (' + str(df['col_15.5.1']) + ' ) ' + ' + ' +  '15.5.2' + ' (' + str(df['col_15.5.2']) + ' ) ' + ' + ' +  '15.5.3' + ' (' + str(df['col_15.5.3']) + ' ) ' + ' + ' +  '15.5.4' + ' (' + str(df['col_15.5.4']) + ' ) ' + ' + ' +  '15.5.5' + ' (' + str(df['col_15.5.5']) + ' ) ' + ' + ' +  '15.5.6' + ' (' + str(df['col_15.5.6']) + ' ) ' + ' + ' +  '15.5.7' + ' (' + str(df['col_15.5.7']) + ' ) ' + '==' +  '15.5.8.a' + ' (' + str(df['col_15.5.8.a']) + ' ) ' + ' + ' +  '15.5.8.b' + ' (' + str(df['col_15.5.8.b']) + ' ) ' + ' + ' +  '15.5.8.c' + ' (' + str(df['col_15.5.8.c']) + ' ) ' + ' + ' +  '15.5.8.d' + ' (' + str(df['col_15.5.8.d']) + ' ) ')
        
        ### Atleast one on left and one on right has values then return CONSISTENT
        elif (pd.notnull(df['col_15.5.1']) or pd.notnull(df['col_15.5.2']) or pd.notnull(df['col_15.5.3']) or pd.notnull(df['col_15.5.4']) or pd.notnull(df['col_15.5.5']) or pd.notnull(df['col_15.5.6']) or pd.notnull(df['col_15.5.7'])) and (pd.notnull(df['col_15.5.8.a']) or pd.notnull(df['col_15.5.8.b']) or pd.isnull(df['col_15.5.8.c']) or pd.notnull(df['col_15.5.8.d'])):
            return con
        
        ### INCONSISTENT or CONSISTENT
        elif (pd.notnull(df['col_15.5.1']) and pd.notnull(df['col_15.5.2']) and pd.notnull(df['col_15.5.3']) and pd.notnull(df['col_15.5.4']) and pd.notnull(df['col_15.5.5']) and pd.notnull(df['col_15.5.6']) and pd.notnull(df['col_15.5.7'])) and (pd.notnull(df['col_15.5.8.a']) and pd.notnull(df['col_15.5.8.b']) and pd.isnull(df['col_15.5.8.c']) and pd.notnull(df['col_15.5.8.d'])):
            ### INCONSISTENT
            if df['col_15.5.1'] + df['col_15.5.2'] + df['col_15.5.3'] + df['col_15.5.4'] + df['col_15.5.5'] + df['col_15.5.6'] + df['col_15.5.7'] != df['col_15.5.8.a'] + df['col_15.5.8.b'] + df['col_15.5.8.c']  + df['col_15.5.8.d']:
                return str( inc  + ' ' + '15.5.1' + ' (' + str(df['col_15.5.1']) + ' ) ' + ' + ' +  '15.5.2' + ' (' + str(df['col_15.5.2']) + ' ) ' + ' + ' +  '15.5.3' + ' (' + str(df['col_15.5.3']) + ' ) ' + ' + ' +  '15.5.4' + ' (' + str(df['col_15.5.4']) + ' ) ' + ' + ' +  '15.5.5' + ' (' + str(df['col_15.5.5']) + ' ) ' + ' + ' +  '15.5.6' + ' (' + str(df['col_15.5.6']) + ' ) ' + ' + ' +  '15.5.7' + ' (' + str(df['col_15.5.7']) + ' ) ' + '!=' +  '15.5.8.a' + ' (' + str(df['col_15.5.8.a']) + ' ) ' + ' + ' +  '15.5.8.b' + ' (' + str(df['col_15.5.8.b']) + ' ) ' + ' + ' +  '15.5.8.c' + ' (' + str(df['col_15.5.8.c']) + ' ) ' + ' + ' +  '15.5.8.d' + ' (' + str(df['col_15.5.8.d']) + ' ) ')
        
            ### CONSISTENT
            elif df['col_15.5.1'] + df['col_15.5.2'] + df['col_15.5.3'] + df['col_15.5.4'] + df['col_15.5.5'] + df['col_15.5.6'] + df['col_15.5.7'] == df['col_15.5.8.a'] + df['col_15.5.8.b'] + df['col_15.5.8.c']  + df['col_15.5.8.d']:
                return con


    # Renaming column names
    # =====================
    df['1.1.1 <= 1.1'] = df.apply(res1, axis=1)
    df['1.1.2 >= 1.1'] = df.apply(res2, axis=1)
    df['1.3.1.a <= 1.3.1'] = df.apply(res3, axis=1)
    df['1.5.1 >= 1.5.2'] = df.apply(res4, axis=1)
    df['1.6.1.a <= 1.6.1.b'] = df.apply(res5, axis=1)
    df['1.6.1.d <= 3.1.1.a + 3.1.1.b'] = df.apply(res6, axis=1)
    df['1.7.1 >= 1.7.2'] = df.apply(res7, axis=1)
    df['1.8.1.a. + 1.8.1.b. + 1.8.1.c. + 1.8.1.d. <= 2.2'] = df.apply(res8, axis=1)
    df['2.2.1 <= 2.2'] = df.apply(res9, axis=1)
    df['2.2.2 <= 2.2'] = df.apply(res10, axis=1)
    df['3.1.1.a + 3.1.1.b + 3.1.3.b >= 2.2 + 2.1.1.a + 2.1.1.b'] = df.apply(res11, axis=1)
    df['3.1.2 <= 3.1.1.a + 3.1.1.b'] = df.apply(res12, axis=1)
    df['2.3 = 2.2 + 2.1.1.a + 2.1.1.b'] = df.apply(res13, axis=1)
    df['3.1.1.a + 3.1.1.b + 3.1.3.a + 3.1.3.b >= 2.2 + 2.1.1.a + 2.1.1.b'] = df.apply(res14, axis=1)
    df['3.1.1.a + 3.1.1.b + 3.1.3.a + 3.1.3.b >= 2.3'] = df.apply(res15, axis=1)
    df['3.4.1 <= 3.1.1.a + 3.1.1.b'] = df.apply(res16, axis=1)
    df['3.4.2 <= 3.4.1'] = df.apply(res17, axis=1)
    df['3.4.2.a <= 3.4.2'] = df.apply(res18, axis=1)
    df['3.4.3 <= 3.1.1.a + 3.1.1.b'] = df.apply(res19, axis=1)
    df['3.4.4 <= 3.1.1.a + 3.1.1.b'] = df.apply(res20, axis=1)
    df['3.5.1.a <= 3.5.1'] = df.apply(res21, axis=1)
    df['6.1.1.a <= 6.1.1'] = df.apply(res22, axis=1)
    df['6.1.2.a <= 6.1.2'] = df.apply(res23, axis=1)
    df['6.1.3.a <= 6.1.3'] = df.apply(res24, axis=1)
    df['10.1.1.b + 10.1.1.c + 10.1.1.d >= 10.1.1.a'] = df.apply(res25, axis=1)
    df['12.3 <= 12.2'] = df.apply(res26, axis=1)
    df['12.4 <= 12.3.a'] = df.apply(res27, axis=1)
    df['12.5 <= 12.3.b'] = df.apply(res28, axis=1)
    df['12.6 <= 12.4 + 12.5'] = df.apply(res29, axis=1)
    df['12.4 + 12.5 <= 12.2'] = df.apply(res30, axis=1)
    df['12.6 <= 12.2'] = df.apply(res31, axis=1)
    df['13.2.1 + 13.2.2 <= 13.1.1 + 13.1.2 + 13.1.3 +13.1.4 + 13.1.5 + 13.1.6 + 13.1.7 + 13.1.8 + 13.1.9 + 13.1.10 + 13.1.11 + 13.1.12 + 13.1.13'] = df.apply(res32, axis=1)
    df['13.3.1.a <= 13.2.1 + 13.2.2'] = df.apply(res33, axis=1)
    df['13.10.2.a <= 13.10.1.a'] = df.apply(res34, axis=1)
    df['13.10.2.b <= 13.10.1.b'] = df.apply(res35, axis=1)
    df['13.10.3.b <= 13.10.3.a'] = df.apply(res36, axis=1)
    df['14.2.1 <= 14.1.1 + 14.1.2'] = df.apply(res37, axis=1)
    df['14.2.2 <= 14.2.1'] = df.apply(res38, axis=1)
    df['14.3.1.b <= 14.3.1.a'] = df.apply(res39, axis=1)
    df['14.3.1.d <= 14.3.1.c'] = df.apply(res40, axis=1)
    df['14.3.2.b <= 14.3.2.a'] = df.apply(res41, axis=1)
    df['14.3.2.d <= 14.3.2.c'] = df.apply(res42, axis=1)
    df['14.3.3.b <= 14.3.3.a'] = df.apply(res43, axis=1)
    df['14.3.3.b <= 14.3.3.a'] = df.apply(res44, axis=1)
    df['14.3.4.b <= 14.3.4.a'] = df.apply(res45, axis=1)
    df['14.3.4.d <= 14.3.4.c'] = df.apply(res46, axis=1)
    df['14.4.1.b <= 14.4.1.a'] = df.apply(res47, axis=1)
    df['14.4.2.b <= 14.4.2.a'] = df.apply(res48, axis=1)
    df['14.4.3.b <= 14.4.3.a'] = df.apply(res49, axis=1)
    df['15.1.1.a + 15.1.1.b + 15.1.2.a + 15.1.2.b + 15.1.3.a + 15.1.3.b == 15.2.1 + 15.2.2 + 15.2.3 + 15.2.4'] = df.apply(res50, axis=1)
    df['15.1.4.a + 15.1.4.b == 15.3.1 + 15.3.2 + 15.3.3 + 15.3.4 + 15.3.5'] = df.apply(res51, axis=1)
    df['15.5.1 + 15.5.2 + 15.5.3 + 15.5.4 + 15.5.5 + 15.5.6 + 15.5.7 == 15.5.8 '] = df.apply(res52, axis=1)
    df['15.5.1 + 15.5.2 + 15.5.3 + 15.5.4 + 15.5.5 + 15.5.6 + 15.5.7 == 15.5.8.a + 15.5.8.b + 15.5.8.c + 15.5.8.d'] = df.apply(res53, axis=1)
 


    # Merging all the renamed columns
    # ===============================
    df = pd.concat([df['1.1.1 <= 1.1'],
                    df['1.1.2 >= 1.1'] ,
                    df['1.3.1.a <= 1.3.1'] ,
                    df['1.5.1 >= 1.5.2'],
                    df['1.6.1.a <= 1.6.1.b'],
                    df['1.6.1.d <= 3.1.1.a + 3.1.1.b'],
                    df['1.7.1 >= 1.7.2'], 
                    df['1.8.1.a. + 1.8.1.b. + 1.8.1.c. + 1.8.1.d. <= 2.2'],
                    df['2.2.1 <= 2.2'],
                    df['2.2.2 <= 2.2'],
                    df['3.1.1.a + 3.1.1.b + 3.1.3.b >= 2.2 + 2.1.1.a + 2.1.1.b'],
                    df['3.1.2 <= 3.1.1.a + 3.1.1.b'],
                    df['2.3 = 2.2 + 2.1.1.a + 2.1.1.b'],
                    df['3.1.1.a + 3.1.1.b + 3.1.3.a + 3.1.3.b >= 2.2 + 2.1.1.a + 2.1.1.b'],
                    df['3.1.1.a + 3.1.1.b + 3.1.3.a + 3.1.3.b >= 2.3'],
                    df['3.4.1 <= 3.1.1.a + 3.1.1.b'],
                    df['3.4.2 <= 3.4.1'] ,
                    df['3.4.2.a <= 3.4.2'] ,
                    df['3.4.3 <= 3.1.1.a + 3.1.1.b'] ,
                    df['3.4.4 <= 3.1.1.a + 3.1.1.b'] ,
                    df['3.5.1.a <= 3.5.1'] ,
                    df['6.1.1.a <= 6.1.1'] ,
                    df['6.1.2.a <= 6.1.2'] ,
                    df['6.1.3.a <= 6.1.3'] ,
                    df['10.1.1.b + 10.1.1.c + 10.1.1.d >= 10.1.1.a'] ,
                    df['12.3 <= 12.2'] ,
                    df['12.4 <= 12.3.a'] ,
                    df['12.5 <= 12.3.b'] ,
                    df['12.6 <= 12.4 + 12.5'] ,
                    df['12.4 + 12.5 <= 12.2'] ,
                    df['12.6 <= 12.2'] ,
                    df['13.2.1 + 13.2.2 <= 13.1.1 + 13.1.2 + 13.1.3 +13.1.4 + 13.1.5 + 13.1.6 + 13.1.7 + 13.1.8 + 13.1.9 + 13.1.10 + 13.1.11 + 13.1.12 + 13.1.13'] ,
                    df['13.3.1.a <= 13.2.1 + 13.2.2'] ,
                    df['13.10.2.a <= 13.10.1.a'] ,
                    df['13.10.2.b <= 13.10.1.b'] ,
                    df['13.10.3.b <= 13.10.3.a'],
                    df['14.2.1 <= 14.1.1 + 14.1.2'] ,
                    df['14.2.2 <= 14.2.1'] ,
                    df['14.3.1.b <= 14.3.1.a'] ,
                    df['14.3.1.d <= 14.3.1.c'] ,
                    df['14.3.2.b <= 14.3.2.a'] ,
                    df['14.3.2.d <= 14.3.2.c'] ,
                    df['14.3.3.b <= 14.3.3.a'] ,
                    df['14.3.3.b <= 14.3.3.a'] ,
                    df['14.3.4.b <= 14.3.4.a'] ,
                    df['14.3.4.d <= 14.3.4.c'] ,
                    df['14.4.1.b <= 14.4.1.a'] ,
                    df['14.4.2.b <= 14.4.2.a'] ,
                    df['14.4.3.b <= 14.4.3.a'] ,
                    df['15.1.1.a + 15.1.1.b + 15.1.2.a + 15.1.2.b + 15.1.3.a + 15.1.3.b == 15.2.1 + 15.2.2 + 15.2.3 + 15.2.4'] ,
                    df['15.1.4.a + 15.1.4.b == 15.3.1 + 15.3.2 + 15.3.3 + 15.3.4 + 15.3.5'] ,
                    df['15.5.1 + 15.5.2 + 15.5.3 + 15.5.4 + 15.5.5 + 15.5.6 + 15.5.7 == 15.5.8 '] ,
                    df['15.5.1 + 15.5.2 + 15.5.3 + 15.5.4 + 15.5.5 + 15.5.6 + 15.5.7 == 15.5.8.a + 15.5.8.b + 15.5.8.c + 15.5.8.d']]
                                    , axis=1)


    # Mergining current result of modified checks with original dataframe and displaying it on screen
    # df = df.drop(columns = df.columns[-1])
    frames = [df_, df]
  
    df = pd.concat(frames, axis=1, sort=False)

    # Renaming
    try:
        try:
            df.rename(columns={df.filter(regex='^[F][a][c][i][l][i][t][y] +[N][a][m][e]|^ +[F][a][c][i][l][i][t][y] +[N][a][m][e]|^[F][a][c][i][l][i][t][y] +[N][a][m][e]/i').columns[0]: 'Facility Name',},inplace=True)
        except:
            pass
        try:
            df.rename(columns={df.filter(regex='^[S][t][a][t][e]$|^[S][t][a][t][e] +$|^ +[S][t][a][t][e]$/i').columns[0]: 'State',},inplace=True)
        except:
            pass
        try:
            df.rename(columns={df.filter(regex='^[D][i][s][t][r][i][c][t] +[N][a][m][e]|^ +[D][i][s][t][r][i][c][t] +[N][a][m][e]|^[D][i][s][t][r][i][c][t] +[N][a][m][e]/i').columns[0]: 'District Name',},inplace=True)
        except:
            pass
        try:
            df.rename(columns={df.filter(regex='^[B][l][o][c][k] +[N][a][m][e]|^[B][l][o][c][k] +[N][a][m][e] |^ +[B][l][o][c][k] +[N][a][m][e] |^ +[B][l][o][c][k] +[N][a][m][e] /i').columns[0]: 'Block Name',},inplace=True)
        except:
            pass

        try:
            df.rename(columns={df.filter(regex='^([S][u][b][-][D][i][s][t][r][i][c][t]) .*([N][a][m][e])|^ +([S][u][b][-][D][i][s][t][r][i][c][t]).* ([N][a][m][e])|^([S][u][b][-][D][i][s][t][r][i][c][t]) .*([N][a][m][e])|^ ([S][u][b][-][D][i][s][t][r][i][c][t]).* ([N][a][m][e])/i').columns[0]: 'Sub-District Name',},inplace=True)
        except:
            df.rename(columns={df.filter(regex='^([S][u][b][-][D][i][v][i][s][i][o][n]) .*([N][a][m][e])|^ +([S][u][b][-][D][i][v][i][s][i][o][n]).* ([N][a][m][e])|^([S][u][b][-][D][i][v][i][s][i][o][n]) .*([N][a][m][e])|^ ([S][u][b][-][D][i][v][i][s][i][o][n]).* ([N][a][m][e])/i').columns[0]: 'Sub-District Name',},inplace=True)
        finally:
            pass

        try:
            df.rename(columns={df.filter(regex='^[O][w][n][e][r][s][h][i][p] *|^ +[O][w][n][e][r][s][h][i][p] */i').columns[0]: 'Ownership',},inplace=True)
        except:
            pass
        try:
            df.rename(columns={df.filter(regex='^[R][u][r][a][l][/][U][r][b][a][n]|^ +[R][u][r][a][l][/][U][r][b][a][n]|^[R][u][r][a][l] +[/] +[U][r][b][a][n]|^[R][u][r][a][l] +[/][U][r][b][a][n]|^[R][u][r][a][l][/] +[U][r][b][a][n]/i').columns[0]: 'Rural/Urban',},inplace=True)
        except:
            pass
        try:
            df.rename(columns={df.filter(regex='^[H][e][a][l][t][h] +[B][l][o][c][k] +[N][a][m][e] *|^ +[H][e][a][l][t][h] +[B][l][o][c][k] +[N][a][m][e] */i').columns[0]: 'Health Block Name',},inplace=True)
        except:
            pass
    except:
        pass

    # Create the messagebox object
    self.msg = QMessageBox()
    # Set the information icon
    self.msg.setWindowIcon(QtGui.QIcon('checked.png'))
    self.msg.setStyleSheet("QLabel { margin-right: 15px ; font-size: 18px; font-family: Arial;} QPushButton {background-color:lightgreen; font-family: Arial; font-size:20px;} ")
    # Set the main message
    self.msg.setText("Health Sub Centre validation successfully completed. \n\n स्वास्थ्य उप केंद्र सत्यापन सफलतापूर्वक पूरा हुआ।")
    # Set the title of the window
    self.msg.setWindowTitle(" ")
    # Display the message box
    self.msg.show()



    return df

# To reference df
def load_HSC(self):
    return df
